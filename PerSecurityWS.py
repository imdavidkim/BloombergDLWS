# C:\Users\David Kim\Downloads\dlws.wsdl
#
# WARNING: this module is autogenerated. Do not edit this file!
#
from scio import client, static

#
# Client class
#
class Client(static.Client):
    _types = static.TypeRegistry()

    class _service(object):
        def __init__(self, client_):
            self._client = client_

        @property
        def getCorrections(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'getCorrections',
                'getCorrections',
                client_.inputClass('getCorrections',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.getCorrectionsRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('getCorrections',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.getCorrectionsResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)

        @property
        def getFields(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'getFields',
                'getFields',
                client_.inputClass('getFields',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.getFieldsRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('getFields',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.getFieldsResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)

        @property
        def getPortfolioValidation(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'getPortfolioValidation',
                'getPortfolioValidation',
                client_.inputClass('getPortfolioValidation',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.getPortfolioValidationRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('getPortfolioValidation',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.getPortfolioValidationResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)

        @property
        def retrieveCancelResponse(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'retrieveCancelResponse',
                'retrieveCancelResponse',
                client_.inputClass('retrieveCancelResponse',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.retrieveCancelRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('retrieveCancelResponse',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.retrieveCancelResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)

        @property
        def retrieveGetActionsResponse(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'retrieveGetActionsResponse',
                'retrieveGetActionsResponse',
                client_.inputClass('retrieveGetActionsResponse',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.retrieveGetActionsRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('retrieveGetActionsResponse',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.retrieveGetActionsResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)

        @property
        def retrieveGetAllQuotesResponse(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'retrieveGetAllQuotesResponse',
                'retrieveGetAllQuotesResponse',
                client_.inputClass('retrieveGetAllQuotesResponse',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.retrieveGetAllQuotesRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('retrieveGetAllQuotesResponse',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.retrieveGetAllQuotesResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)

        @property
        def retrieveGetCompanyResponse(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'retrieveGetCompanyResponse',
                'retrieveGetCompanyResponse',
                client_.inputClass('retrieveGetCompanyResponse',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.retrieveGetCompanyRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('retrieveGetCompanyResponse',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.retrieveGetCompanyResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)

        @property
        def retrieveGetDataResponse(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'retrieveGetDataResponse',
                'retrieveGetDataResponse',
                client_.inputClass('retrieveGetDataResponse',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.retrieveGetDataRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('retrieveGetDataResponse',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.retrieveGetDataResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)

        @property
        def retrieveGetFundamentalsResponse(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'retrieveGetFundamentalsResponse',
                'retrieveGetFundamentalsResponse',
                client_.inputClass('retrieveGetFundamentalsResponse',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.retrieveGetFundamentalsRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('retrieveGetFundamentalsResponse',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.retrieveGetFundamentalsResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)

        @property
        def retrieveGetHistoryResponse(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'retrieveGetHistoryResponse',
                'retrieveGetHistoryResponse',
                client_.inputClass('retrieveGetHistoryResponse',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.retrieveGetHistoryRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('retrieveGetHistoryResponse',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.retrieveGetHistoryResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)

        @property
        def retrieveGetQuotesResponse(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'retrieveGetQuotesResponse',
                'retrieveGetQuotesResponse',
                client_.inputClass('retrieveGetQuotesResponse',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.retrieveGetQuotesRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('retrieveGetQuotesResponse',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.retrieveGetQuotesResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)

        @property
        def retrieveMmktBvalDealsUploadResponse(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'retrieveMmktBvalDealsUploadResponse',
                'retrieveMmktBvalDealsUploadResponse',
                client_.inputClass('retrieveMmktBvalDealsUploadResponse',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.retrieveMmktBvalDealsUploadRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('retrieveMmktBvalDealsUploadResponse',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.retrieveMmktBvalDealsUploadResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)

        @property
        def retrieveOtcBvalDealsUploadResponse(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'retrieveOtcBvalDealsUploadResponse',
                'retrieveOtcBvalDealsUploadResponse',
                client_.inputClass('retrieveOtcBvalDealsUploadResponse',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.retrieveOtcBvalDealsUploadRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('retrieveOtcBvalDealsUploadResponse',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.retrieveOtcBvalDealsUploadResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)

        @property
        def retrieveOtcbvalUploadResponse(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'retrieveOtcbvalUploadResponse',
                'retrieveOtcbvalUploadResponse',
                client_.inputClass('retrieveOtcbvalUploadResponse',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.retrieveOtcbvalUploadRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('retrieveOtcbvalUploadResponse',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.retrieveOtcbvalUploadResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)

        @property
        def retrieveScheduledResponse(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'retrieveScheduledResponse',
                'retrieveScheduledResponse',
                client_.inputClass('retrieveScheduledResponse',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.retrieveScheduledRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('retrieveScheduledResponse',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.retrieveScheduledResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)

        @property
        def submitCancelRequest(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'submitCancelRequest',
                'submitCancelRequest',
                client_.inputClass('submitCancelRequest',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.submitCancelRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('submitCancelRequest',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.submitCancelResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)

        @property
        def submitGetActionsRequest(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'submitGetActionsRequest',
                'submitGetActionsRequest',
                client_.inputClass('submitGetActionsRequest',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.submitGetActionsRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('submitGetActionsRequest',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.submitGetActionsResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)

        @property
        def submitGetAllQuotesRequest(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'submitGetAllQuotesRequest',
                'submitGetAllQuotesRequest',
                client_.inputClass('submitGetAllQuotesRequest',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.submitGetAllQuotesRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('submitGetAllQuotesRequest',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.submitGetAllQuotesResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)

        @property
        def submitGetCompanyRequest(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'submitGetCompanyRequest',
                'submitGetCompanyRequest',
                client_.inputClass('submitGetCompanyRequest',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.submitGetCompanyRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('submitGetCompanyRequest',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.submitGetCompanyResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)

        @property
        def submitGetDataRequest(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'submitGetDataRequest',
                'submitGetDataRequest',
                client_.inputClass('submitGetDataRequest',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.submitGetDataRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('submitGetDataRequest',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.submitGetDataResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)

        @property
        def submitGetFundamentalsRequest(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'submitGetFundamentalsRequest',
                'submitGetFundamentalsRequest',
                client_.inputClass('submitGetFundamentalsRequest',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.submitGetFundamentalsRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('submitGetFundamentalsRequest',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.submitGetFundamentalsResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)

        @property
        def submitGetHistoryRequest(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'submitGetHistoryRequest',
                'submitGetHistoryRequest',
                client_.inputClass('submitGetHistoryRequest',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.submitGetHistoryRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('submitGetHistoryRequest',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.submitGetHistoryResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)

        @property
        def submitGetQuotesRequest(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'submitGetQuotesRequest',
                'submitGetQuotesRequest',
                client_.inputClass('submitGetQuotesRequest',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.submitGetQuotesRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('submitGetQuotesRequest',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.submitGetQuotesResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)

        @property
        def submitMmktBvalDealsUploadRequest(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'submitMmktBvalDealsUploadRequest',
                'submitMmktBvalDealsUploadRequest',
                client_.inputClass('submitMmktBvalDealsUploadRequest',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.submitMmktBvalDealsUploadRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('submitMmktBvalDealsUploadRequest',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.submitMmktBvalDealsUploadResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)

        @property
        def submitOtcBvalDealsUploadRequest(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'submitOtcBvalDealsUploadRequest',
                'submitOtcBvalDealsUploadRequest',
                client_.inputClass('submitOtcBvalDealsUploadRequest',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.submitOtcBvalDealsUploadRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('submitOtcBvalDealsUploadRequest',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.submitOtcBvalDealsUploadResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)

        @property
        def submitOtcbvalUploadRequest(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'submitOtcbvalUploadRequest',
                'submitOtcbvalUploadRequest',
                client_.inputClass('submitOtcbvalUploadRequest',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.submitOtcbvalUploadRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('submitOtcbvalUploadRequest',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.submitOtcbvalUploadResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)

        @property
        def submitScheduledRequest(self):
            client_ = self._client
            meth = client_.methodClass(
                'https://dlws.bloomberg.com/dlps',
                'submitScheduledRequest',
                'submitScheduledRequest',
                client_.inputClass('submitScheduledRequest',
                                   'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                   [('parameters', client_.type.submitScheduledRequest),
                                    ],
                                   'document',
                                   'True',
                                   []),
                client_.outputClass('submitScheduledRequest',
                                    'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
                                    [('result', client_.type.submitScheduledResponse),
                                     ],
                                    [])
                )
            return client_.methodCallClass(client_, meth)


#
# Types
#

class Actions(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'Actions')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    action = client.AttributeDescriptor(name='action', type_=client.StringType, min='0', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [action]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("Actions", Actions)


class ActionsDate(client.EnumType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'ActionsDate')
    _values = ['entry', 'effective', 'both']
    entry = 'entry'
    effective = 'effective'
    both = 'both'
Client.register("ActionsDate", ActionsDate)


class BvalFieldMacro(client.EnumType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'BvalFieldMacro')
    _values = ['BVAL_ALL', 'BVAL_BOND', 'BVAL_MTGE', 'BVAL_MUNI']
    BVAL_ALL = 'BVAL_ALL'
    BVAL_BOND = 'BVAL_BOND'
    BVAL_MTGE = 'BVAL_MTGE'
    BVAL_MUNI = 'BVAL_MUNI'
Client.register("BvalFieldMacro", BvalFieldMacro)


class BvalFieldSet(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'BvalFieldSet')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    fieldmacro = client.AttributeDescriptor(name='fieldmacro', type_=BvalFieldMacro, min='1', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    date = client.AttributeDescriptor(name='date', type_=client.DateType, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [fieldmacro, date]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("BvalFieldSet", BvalFieldSet)


class BvalFieldSets(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'BvalFieldSets')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    fieldset = client.AttributeDescriptor(name='fieldset', type_=BvalFieldSet, min='1', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [fieldset]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("BvalFieldSets", BvalFieldSets)


class BvalSnapshot(client.EnumType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'BvalSnapshot')
    _values = ['ny4pm', 'lo4pm', 'to4pm', 'ny3pm', 'lo3pm', 'to3pm', 'lo12pm', 'to5pm', 'sy5pm']
    ny4pm = 'ny4pm'
    lo4pm = 'lo4pm'
    to4pm = 'to4pm'
    ny3pm = 'ny3pm'
    lo3pm = 'lo3pm'
    to3pm = 'to3pm'
    lo12pm = 'lo12pm'
    to5pm = 'to5pm'
    sy5pm = 'sy5pm'
Client.register("BvalSnapshot", BvalSnapshot)


class BvalTier(client.EnumType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'BvalTier')
    _values = ['1', '2']
    _1 = '1'
    _2 = '2'
Client.register("BvalTier", BvalTier)


class CancelStatus(client.EnumType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'CancelStatus')
    _values = ['ERROR', 'NOT FOUND', 'CANCELLED']
    ERROR = 'ERROR'
    NOT_FOUND = 'NOT FOUND'
    CANCELLED = 'CANCELLED'
Client.register("CancelStatus", CancelStatus)


class CancelResponseStatus(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'CancelResponseStatus')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    cancelStatus = client.AttributeDescriptor(name='cancelStatus', type_=CancelStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId, cancelStatus]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("CancelResponseStatus", CancelResponseStatus)


class DLCategory(client.EnumType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'DLCategory')
    _values = ['Security Master', 'Derived Data', 'End of Day Pricing', 'User Entered Info.', 'Corporate Actions', 'Historical Time Series', 'Estimates', 'Fundamentals', 'Quote Composite', 'Credit Risk', 'Reg SSFA', 'Bram Fair Value Hierarchy Leveling Tool', 'Premium BRAM Transparency', 'Price Uncertainty', 'Not Downloadable']
    Security_Master = 'Security Master'
    Derived_Data = 'Derived Data'
    End_of_Day_Pricing = 'End of Day Pricing'
    User_Entered_Info_ = 'User Entered Info.'
    Corporate_Actions = 'Corporate Actions'
    Historical_Time_Series = 'Historical Time Series'
    Estimates = 'Estimates'
    Fundamentals = 'Fundamentals'
    Quote_Composite = 'Quote Composite'
    Credit_Risk = 'Credit Risk'
    Reg_SSFA = 'Reg SSFA'
    Bram_Fair_Value_Hierarchy_Leveling_Tool = 'Bram Fair Value Hierarchy Leveling Tool'
    Premium_BRAM_Transparency = 'Premium BRAM Transparency'
    Price_Uncertainty = 'Price Uncertainty'
    Not_Downloadable = 'Not Downloadable'
Client.register("DLCategory", DLCategory)


class DLCategory2(client.EnumType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'DLCategory2')
    _values = ['Security Master', 'Derived - Intraday', 'Derived - End of Day', 'Pricing - Intraday', 'Pricing - End of Day', 'User Entered Info.', 'Corporate Actions', 'Historical Time Series', 'Estimates', 'Fundamentals', 'Quote Composite', 'Quote Composite History', 'Credit Risk', 'Packaged', 'Open Source', 'Reg SSFA', 'Volatility Surface', 'Volatility Cube', 'Bram Fair Value Hierarchy Leveling Tool', 'Credit Risk Corporate Structure', 'Credit Risk Capital Structure', 'Credit Risk Regulatory Compliance', 'Premium BRAM Transparency', 'Price Uncertainty', 'Not Downloadable', 'Central Bank Eligibility', 'Covered Funds', 'High Quality Liquid Assets', 'Liquidity Assessment', 'MiFIR', 'Default Risk', 'IFRS 9 SPPI', 'Collateral Tagging', 'US Withholding Tax', 'Expected Credit Loss', 'Basic Tax', 'Investor Protection']
    Security_Master = 'Security Master'
    Derived_Intraday = 'Derived - Intraday'
    Derived_End_of_Day = 'Derived - End of Day'
    Pricing_Intraday = 'Pricing - Intraday'
    Pricing_End_of_Day = 'Pricing - End of Day'
    User_Entered_Info_ = 'User Entered Info.'
    Corporate_Actions = 'Corporate Actions'
    Historical_Time_Series = 'Historical Time Series'
    Estimates = 'Estimates'
    Fundamentals = 'Fundamentals'
    Quote_Composite = 'Quote Composite'
    Quote_Composite_History = 'Quote Composite History'
    Credit_Risk = 'Credit Risk'
    Packaged = 'Packaged'
    Open_Source = 'Open Source'
    Reg_SSFA = 'Reg SSFA'
    Volatility_Surface = 'Volatility Surface'
    Volatility_Cube = 'Volatility Cube'
    Bram_Fair_Value_Hierarchy_Leveling_Tool = 'Bram Fair Value Hierarchy Leveling Tool'
    Credit_Risk_Corporate_Structure = 'Credit Risk Corporate Structure'
    Credit_Risk_Capital_Structure = 'Credit Risk Capital Structure'
    Credit_Risk_Regulatory_Compliance = 'Credit Risk Regulatory Compliance'
    Premium_BRAM_Transparency = 'Premium BRAM Transparency'
    Price_Uncertainty = 'Price Uncertainty'
    Not_Downloadable = 'Not Downloadable'
    Central_Bank_Eligibility = 'Central Bank Eligibility'
    Covered_Funds = 'Covered Funds'
    High_Quality_Liquid_Assets = 'High Quality Liquid Assets'
    Liquidity_Assessment = 'Liquidity Assessment'
    MiFIR = 'MiFIR'
    Default_Risk = 'Default Risk'
    IFRS_9_SPPI = 'IFRS 9 SPPI'
    Collateral_Tagging = 'Collateral Tagging'
    US_Withholding_Tax = 'US Withholding Tax'
    Expected_Credit_Loss = 'Expected Credit Loss'
    Basic_Tax = 'Basic Tax'
    Investor_Protection = 'Investor Protection'
Client.register("DLCategory2", DLCategory2)


class DataItem(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'DataItem')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    value = client.AttributeDescriptor(name='value', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [value]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("DataItem", DataItem)


class DateFormat(client.EnumType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'DateFormat')
    _values = ['mmddyy', 'yyddmm', 'mmyydd', 'ddmmyy', 'yyyyddmm', 'mmyyyydd', 'yyyymmdd', 'yymmdd', 'ddyymm', 'mmddyyyy', 'yyyy/mm/dd', 'ddyyyymm', 'dd-mmm-yy', 'ddmmyyyy']
    mmddyy = 'mmddyy'
    yyddmm = 'yyddmm'
    mmyydd = 'mmyydd'
    ddmmyy = 'ddmmyy'
    yyyyddmm = 'yyyyddmm'
    mmyyyydd = 'mmyyyydd'
    yyyymmdd = 'yyyymmdd'
    yymmdd = 'yymmdd'
    ddyymm = 'ddyymm'
    mmddyyyy = 'mmddyyyy'
    yyyy_mm_dd = 'yyyy/mm/dd'
    ddyyyymm = 'ddyyyymm'
    dd_mmm_yy = 'dd-mmm-yy'
    ddmmyyyy = 'ddmmyyyy'
Client.register("DateFormat", DateFormat)


class GetCorrectionsHeaders(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'GetCorrectionsHeaders')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    dateformat = client.AttributeDescriptor(name='dateformat', type_=DateFormat, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [dateformat]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("GetCorrectionsHeaders", GetCorrectionsHeaders)


class DateTimeRange(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'DateTimeRange')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    startDateTime = client.AttributeDescriptor(name='startDateTime', type_=client.DateTimeType, min='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    endDateTime = client.AttributeDescriptor(name='endDateTime', type_=client.DateTimeType, min='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    region = client.AttributeDescriptor(name='region', type_=client.StringType, min='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    dst = client.AttributeDescriptor(name='dst', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [startDateTime, endDateTime, region, dst]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("DateTimeRange", DateTimeRange)


class DiffFlag(client.EnumType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'DiffFlag')
    _values = ['yes', 'no', 'changes']
    yes = 'yes'
    no = 'no'
    changes = 'changes'
Client.register("DiffFlag", DiffFlag)


class Duration(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'Duration')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    days = client.AttributeDescriptor(name='days', type_=client.IntType, min='1', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [days]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("Duration", Duration)


class FieldMacro(client.EnumType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'FieldMacro')
    _values = ['BO_CREDIT_RISK_COMPANY', 'BO_CREDIT_RISK_FITCH', 'BO_CREDIT_RISK_MOODY', 'BO_CREDIT_RISK_RATINGS1', 'BO_CREDIT_RISK_RATINGS2', 'BO_CREDIT_RISK_SP', 'BVAL_FVHL_REG_TRANSPARENCY']
    BO_CREDIT_RISK_COMPANY = 'BO_CREDIT_RISK_COMPANY'
    BO_CREDIT_RISK_FITCH = 'BO_CREDIT_RISK_FITCH'
    BO_CREDIT_RISK_MOODY = 'BO_CREDIT_RISK_MOODY'
    BO_CREDIT_RISK_RATINGS1 = 'BO_CREDIT_RISK_RATINGS1'
    BO_CREDIT_RISK_RATINGS2 = 'BO_CREDIT_RISK_RATINGS2'
    BO_CREDIT_RISK_SP = 'BO_CREDIT_RISK_SP'
    BVAL_FVHL_REG_TRANSPARENCY = 'BVAL_FVHL_REG_TRANSPARENCY'
Client.register("FieldMacro", FieldMacro)


class FieldSet(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'FieldSet')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    fieldmacro = client.AttributeDescriptor(name='fieldmacro', type_=FieldMacro, min='1', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    date = client.AttributeDescriptor(name='date', type_=client.DateType, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [fieldmacro, date]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("FieldSet", FieldSet)


class FieldSets(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'FieldSets')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    fieldset = client.AttributeDescriptor(name='fieldset', type_=FieldSet, min='1', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [fieldset]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("FieldSets", FieldSets)


class FieldType(client.EnumType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'FieldType')
    _values = ['Character', 'Numeric', 'Price', 'Security', 'Date', 'Time', 'Date/Time', 'Bulk', 'Month/Year', 'Boolean', 'Currency', 'Integer', 'Real']
    Character = 'Character'
    Numeric = 'Numeric'
    Price = 'Price'
    Security = 'Security'
    Date = 'Date'
    Time = 'Time'
    Date_Time = 'Date/Time'
    Bulk = 'Bulk'
    Month_Year = 'Month/Year'
    Boolean = 'Boolean'
    Currency = 'Currency'
    Integer = 'Integer'
    Real = 'Real'
Client.register("FieldType", FieldType)


class BulkArrayEntry(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'BulkArrayEntry')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    value = client.AttributeDescriptor(name='value', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    type = client.AttributeDescriptor(name='type', type_=FieldType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _attributes = [value, type]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("BulkArrayEntry", BulkArrayEntry)


class BulkArray(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'BulkArray')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    data = client.AttributeDescriptor(name='data', type_=BulkArrayEntry, min='0', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [data]
    columns = client.AttributeDescriptor(name='columns', type_=client.IntType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _attributes = [columns]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("BulkArray", BulkArray)


class Data(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'Data')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    bulkarray = client.AttributeDescriptor(name='bulkarray', type_=BulkArray, min='0', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [bulkarray]
    field = client.AttributeDescriptor(name='field', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    value = client.AttributeDescriptor(name='value', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    isArray = client.AttributeDescriptor(name='isArray', type_=client.BooleanType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    rows = client.AttributeDescriptor(name='rows', type_=client.IntType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _attributes = [field, value, isArray, rows]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("Data", Data)


class Fields(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'Fields')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    field = client.AttributeDescriptor(name='field', type_=client.StringType, min='1', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [field]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("Fields", Fields)


class FilingStatus(client.EnumType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'FilingStatus')
    _values = ['mostrecent', 'prelim', 'original', 'restated']
    mostrecent = 'mostrecent'
    prelim = 'prelim'
    original = 'original'
    restated = 'restated'
Client.register("FilingStatus", FilingStatus)


class GetCorrectionsRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'GetCorrectionsRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    responseDate = client.AttributeDescriptor(name='responseDate', type_=client.DateType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseDate]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("GetCorrectionsRequest", GetCorrectionsRequest)


class getCorrectionsRequest(GetCorrectionsRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'getCorrectionsRequest')
    _tag = 'getCorrectionsRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    responseDate = client.AttributeDescriptor(name='responseDate', type_=client.DateType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseDate]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("getCorrectionsRequest", getCorrectionsRequest)


class GetPortfolioValidationRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'GetPortfolioValidationRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseDate = client.AttributeDescriptor(name='responseDate', type_=client.DateType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId, responseDate]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("GetPortfolioValidationRequest", GetPortfolioValidationRequest)


class getPortfolioValidationRequest(GetPortfolioValidationRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'getPortfolioValidationRequest')
    _tag = 'getPortfolioValidationRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseDate = client.AttributeDescriptor(name='responseDate', type_=client.DateType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId, responseDate]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("getPortfolioValidationRequest", getPortfolioValidationRequest)


class HistData(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'HistData')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    value = client.AttributeDescriptor(name='value', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _attributes = [value]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("HistData", HistData)


class HistOption(client.EnumType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'HistOption')
    _values = ['average']
    average = 'average'
Client.register("HistOption", HistOption)


class HistPeriod(client.EnumType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'HistPeriod')
    _values = ['daily', 'weekly', 'monthly', 'quarterly', 'yearly']
    daily = 'daily'
    weekly = 'weekly'
    monthly = 'monthly'
    quarterly = 'quarterly'
    yearly = 'yearly'
Client.register("HistPeriod", HistPeriod)


class InstrumentType(client.EnumType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'InstrumentType')
    _values = ['AUSTRIAN', 'BB_UNIQUE', 'BB_GLOBAL', 'BELGIAN', 'CATS', 'CEDEL', 'CINS', 'COMMON_NUMBER', 'CUSIP', 'CZECH', 'DUTCH', 'EUROCLEAR', 'FRENCH', 'IRISH', 'ISIN', 'ISRAELI', 'ITALY', 'JAPAN', 'LUXEMBOURG', 'SEDOL', 'SPAIN', 'TICKER', 'VALOREN', 'WPK', 'BB_COMPANY']
    AUSTRIAN = 'AUSTRIAN'
    BB_UNIQUE = 'BB_UNIQUE'
    BB_GLOBAL = 'BB_GLOBAL'
    BELGIAN = 'BELGIAN'
    CATS = 'CATS'
    CEDEL = 'CEDEL'
    CINS = 'CINS'
    COMMON_NUMBER = 'COMMON_NUMBER'
    CUSIP = 'CUSIP'
    CZECH = 'CZECH'
    DUTCH = 'DUTCH'
    EUROCLEAR = 'EUROCLEAR'
    FRENCH = 'FRENCH'
    IRISH = 'IRISH'
    ISIN = 'ISIN'
    ISRAELI = 'ISRAELI'
    ITALY = 'ITALY'
    JAPAN = 'JAPAN'
    LUXEMBOURG = 'LUXEMBOURG'
    SEDOL = 'SEDOL'
    SPAIN = 'SPAIN'
    TICKER = 'TICKER'
    VALOREN = 'VALOREN'
    WPK = 'WPK'
    BB_COMPANY = 'BB_COMPANY'
Client.register("InstrumentType", InstrumentType)


class MacroType(client.EnumType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'MacroType')
    _values = ['BOND_SRCH', 'EQUITY_SRCH', 'EXCH', 'INDEX', 'PFD_SRCH', 'PORTFOLIO', 'SECTYP', 'BSRCH']
    BOND_SRCH = 'BOND_SRCH'
    EQUITY_SRCH = 'EQUITY_SRCH'
    EXCH = 'EXCH'
    INDEX = 'INDEX'
    PFD_SRCH = 'PFD_SRCH'
    PORTFOLIO = 'PORTFOLIO'
    SECTYP = 'SECTYP'
    BSRCH = 'BSRCH'
Client.register("MacroType", MacroType)


class PrimaryQualifier(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'PrimaryQualifier')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    primaryQualifierType = client.AttributeDescriptor(name='primaryQualifierType', type_=MacroType, min='1', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    primaryQualifierValue = client.AttributeDescriptor(name='primaryQualifierValue', type_=client.StringType, min='1', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [primaryQualifierType, primaryQualifierValue]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("PrimaryQualifier", PrimaryQualifier)


class MarketSector(client.EnumType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'MarketSector')
    _values = ['Govt', 'Corp', 'Mtge', 'M-Mkt', 'Muni', 'Pfd', 'Equity', 'Comdty', 'Index', 'Curncy']
    Govt = 'Govt'
    Corp = 'Corp'
    Mtge = 'Mtge'
    M_Mkt = 'M-Mkt'
    Muni = 'Muni'
    Pfd = 'Pfd'
    Equity = 'Equity'
    Comdty = 'Comdty'
    Index = 'Index'
    Curncy = 'Curncy'
Client.register("MarketSector", MarketSector)


class ActionStandardFields(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'ActionStandardFields')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    companyId = client.AttributeDescriptor(name='companyId', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    securityId = client.AttributeDescriptor(name='securityId', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    actionId = client.AttributeDescriptor(name='actionId', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    mnemonic = client.AttributeDescriptor(name='mnemonic', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    flag = client.AttributeDescriptor(name='flag', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    companyName = client.AttributeDescriptor(name='companyName', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    secIdType = client.AttributeDescriptor(name='secIdType', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    secId = client.AttributeDescriptor(name='secId', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    currency = client.AttributeDescriptor(name='currency', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    marketSectorDes = client.AttributeDescriptor(name='marketSectorDes', type_=MarketSector, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    bbUnique = client.AttributeDescriptor(name='bbUnique', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    announceDate = client.AttributeDescriptor(name='announceDate', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    effectiveDate = client.AttributeDescriptor(name='effectiveDate', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    amendDate = client.AttributeDescriptor(name='amendDate', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    bbGlobal = client.AttributeDescriptor(name='bbGlobal', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    bbGlobalCompany = client.AttributeDescriptor(name='bbGlobalCompany', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    bbSecNumDes = client.AttributeDescriptor(name='bbSecNumDes', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    feedSource = client.AttributeDescriptor(name='feedSource', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [companyId, securityId, actionId, mnemonic, flag, companyName, secIdType, secId, currency, marketSectorDes, bbUnique, announceDate, effectiveDate, amendDate, bbGlobal, bbGlobalCompany, bbSecNumDes, feedSource]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("ActionStandardFields", ActionStandardFields)


class FieldInfo(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'FieldInfo')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    id = client.AttributeDescriptor(name='id', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    mnemonic = client.AttributeDescriptor(name='mnemonic', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    description = client.AttributeDescriptor(name='description', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    dlCategory = client.AttributeDescriptor(name='dlCategory', type_=DLCategory, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    definition = client.AttributeDescriptor(name='definition', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    marketsectors = client.AttributeDescriptor(name='marketsectors', type_=MarketSector, min='0', max='10', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    standardWidth = client.AttributeDescriptor(name='standardWidth', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    standardDecimalPlaces = client.AttributeDescriptor(name='standardDecimalPlaces', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fieldType = client.AttributeDescriptor(name='fieldType', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    backoffice = client.AttributeDescriptor(name='backoffice', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    extendedBackoffice = client.AttributeDescriptor(name='extendedBackoffice', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    productionDate = client.AttributeDescriptor(name='productionDate', type_=client.DateType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    dlCategory2 = client.AttributeDescriptor(name='dlCategory2', type_=DLCategory2, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    psBoOpt = client.AttributeDescriptor(name='psBoOpt', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    getHistory = client.AttributeDescriptor(name='getHistory', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    getCompany = client.AttributeDescriptor(name='getCompany', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    bval = client.AttributeDescriptor(name='bval', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    bvalBlocked = client.AttributeDescriptor(name='bvalBlocked', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    dsBvalMetered = client.AttributeDescriptor(name='dsBvalMetered', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    sapiOMS = client.AttributeDescriptor(name='sapiOMS', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    oldMnemonic = client.AttributeDescriptor(name='oldMnemonic', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    currentMaximumWidth = client.AttributeDescriptor(name='currentMaximumWidth', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    dlBoOptFundamentals = client.AttributeDescriptor(name='dlBoOptFundamentals', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    dlBoOptBDVD = client.AttributeDescriptor(name='dlBoOptBDVD', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    dlBoOptBEST = client.AttributeDescriptor(name='dlBoOptBEST', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    dlBoOptCreditRisk = client.AttributeDescriptor(name='dlBoOptCreditRisk', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    dlBoOptCapStruct = client.AttributeDescriptor(name='dlBoOptCapStruct', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    dlBoOptCreditRiskGetCompany = client.AttributeDescriptor(name='dlBoOptCreditRiskGetCompany', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    dlBoOptCapStructGetCompany = client.AttributeDescriptor(name='dlBoOptCapStructGetCompany', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    dlBoOptRegCompliance = client.AttributeDescriptor(name='dlBoOptRegCompliance', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    dlBoOptIssuerRatings = client.AttributeDescriptor(name='dlBoOptIssuerRatings', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [id, mnemonic, description, dlCategory, definition, marketsectors, standardWidth, standardDecimalPlaces, fieldType, backoffice, extendedBackoffice, productionDate, dlCategory2, psBoOpt, getHistory, getCompany, bval, bvalBlocked, dsBvalMetered, sapiOMS, oldMnemonic, currentMaximumWidth, dlBoOptFundamentals, dlBoOptBDVD, dlBoOptBEST, dlBoOptCreditRisk, dlBoOptCapStruct, dlBoOptCreditRiskGetCompany, dlBoOptCapStructGetCompany, dlBoOptRegCompliance, dlBoOptIssuerRatings]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("FieldInfo", FieldInfo)


class FieldInfos(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'FieldInfos')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    field = client.AttributeDescriptor(name='field', type_=FieldInfo, min='0', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [field]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("FieldInfos", FieldInfos)


class FieldSearchCriteria(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'FieldSearchCriteria')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    keyword = client.AttributeDescriptor(name='keyword', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    mnemonic = client.AttributeDescriptor(name='mnemonic', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    dlCategories = client.AttributeDescriptor(name='dlCategories', type_=DLCategory, min='0', max='5', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    overridable = client.AttributeDescriptor(name='overridable', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    marketsectors = client.AttributeDescriptor(name='marketsectors', type_=MarketSector, min='0', max='10', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    dlCategories2 = client.AttributeDescriptor(name='dlCategories2', type_=DLCategory2, min='0', max='5', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [keyword, mnemonic, dlCategories, overridable, marketsectors, dlCategories2]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("FieldSearchCriteria", FieldSearchCriteria)


class GetFieldsRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'GetFieldsRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    criteria = client.AttributeDescriptor(name='criteria', type_=FieldSearchCriteria, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [criteria]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("GetFieldsRequest", GetFieldsRequest)


class getFieldsRequest(GetFieldsRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'getFieldsRequest')
    _tag = 'getFieldsRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    criteria = client.AttributeDescriptor(name='criteria', type_=FieldSearchCriteria, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [criteria]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("getFieldsRequest", getFieldsRequest)


class MmktBvalHeaders(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'MmktBvalHeaders')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    contentType = client.AttributeDescriptor(name='contentType', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    mimeVersion = client.AttributeDescriptor(name='mimeVersion', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    contentEncoding = client.AttributeDescriptor(name='contentEncoding', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    contentDisposition = client.AttributeDescriptor(name='contentDisposition', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fileName = client.AttributeDescriptor(name='fileName', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [contentType, mimeVersion, contentEncoding, contentDisposition, fileName]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("MmktBvalHeaders", MmktBvalHeaders)


class SubmitMmktBvalDealsUploadRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SubmitMmktBvalDealsUploadRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    usernumber = client.AttributeDescriptor(name='usernumber', type_=client.IntType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    mmktBvalHeaders = client.AttributeDescriptor(name='mmktBvalHeaders', type_=MmktBvalHeaders, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fileContent = client.AttributeDescriptor(name='fileContent', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [usernumber, mmktBvalHeaders, fileContent]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("SubmitMmktBvalDealsUploadRequest", SubmitMmktBvalDealsUploadRequest)


class submitMmktBvalDealsUploadRequest(SubmitMmktBvalDealsUploadRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'submitMmktBvalDealsUploadRequest')
    _tag = 'submitMmktBvalDealsUploadRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    usernumber = client.AttributeDescriptor(name='usernumber', type_=client.IntType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    mmktBvalHeaders = client.AttributeDescriptor(name='mmktBvalHeaders', type_=MmktBvalHeaders, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fileContent = client.AttributeDescriptor(name='fileContent', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [usernumber, mmktBvalHeaders, fileContent]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("submitMmktBvalDealsUploadRequest", submitMmktBvalDealsUploadRequest)


class OtcBvalAction(client.EnumType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'OtcBvalAction')
    _values = ['insert', 'update', 'unwind', 'reprice']
    insert = 'insert'
    update = 'update'
    unwind = 'unwind'
    reprice = 'reprice'
Client.register("OtcBvalAction", OtcBvalAction)


class OtcBvalHeaders(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'OtcBvalHeaders')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    contentType = client.AttributeDescriptor(name='contentType', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    mimeVersion = client.AttributeDescriptor(name='mimeVersion', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    contentEncoding = client.AttributeDescriptor(name='contentEncoding', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    contentDisposition = client.AttributeDescriptor(name='contentDisposition', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fileName = client.AttributeDescriptor(name='fileName', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [contentType, mimeVersion, contentEncoding, contentDisposition, fileName]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("OtcBvalHeaders", OtcBvalHeaders)


class SubmitOtcBvalDealsUploadRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SubmitOtcBvalDealsUploadRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    usernumber = client.AttributeDescriptor(name='usernumber', type_=client.IntType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    otcBvalHeaders = client.AttributeDescriptor(name='otcBvalHeaders', type_=OtcBvalHeaders, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fileContent = client.AttributeDescriptor(name='fileContent', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [usernumber, otcBvalHeaders, fileContent]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("SubmitOtcBvalDealsUploadRequest", SubmitOtcBvalDealsUploadRequest)


class submitOtcBvalDealsUploadRequest(SubmitOtcBvalDealsUploadRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'submitOtcBvalDealsUploadRequest')
    _tag = 'submitOtcBvalDealsUploadRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    usernumber = client.AttributeDescriptor(name='usernumber', type_=client.IntType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    otcBvalHeaders = client.AttributeDescriptor(name='otcBvalHeaders', type_=OtcBvalHeaders, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fileContent = client.AttributeDescriptor(name='fileContent', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [usernumber, otcBvalHeaders, fileContent]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("submitOtcBvalDealsUploadRequest", submitOtcBvalDealsUploadRequest)


class SubmitOtcbvalUploadRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SubmitOtcbvalUploadRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    usernumber = client.AttributeDescriptor(name='usernumber', type_=client.IntType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    otcBvalHeaders = client.AttributeDescriptor(name='otcBvalHeaders', type_=OtcBvalHeaders, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fileContent = client.AttributeDescriptor(name='fileContent', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [usernumber, otcBvalHeaders, fileContent]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("SubmitOtcbvalUploadRequest", SubmitOtcbvalUploadRequest)


class submitOtcbvalUploadRequest(SubmitOtcbvalUploadRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'submitOtcbvalUploadRequest')
    _tag = 'submitOtcbvalUploadRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    usernumber = client.AttributeDescriptor(name='usernumber', type_=client.IntType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    otcBvalHeaders = client.AttributeDescriptor(name='otcBvalHeaders', type_=OtcBvalHeaders, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fileContent = client.AttributeDescriptor(name='fileContent', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [usernumber, otcBvalHeaders, fileContent]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("submitOtcbvalUploadRequest", submitOtcbvalUploadRequest)


class Override(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'Override')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    field = client.AttributeDescriptor(name='field', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    value = client.AttributeDescriptor(name='value', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [field, value]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("Override", Override)


class Overrides(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'Overrides')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    override = client.AttributeDescriptor(name='override', type_=Override, min='0', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [override]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("Overrides", Overrides)


class Instrument(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'Instrument')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    id = client.AttributeDescriptor(name='id', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    yellowkey = client.AttributeDescriptor(name='yellowkey', type_=MarketSector, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    type = client.AttributeDescriptor(name='type', type_=InstrumentType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    overrides = client.AttributeDescriptor(name='overrides', type_=Overrides, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [id, yellowkey, type, overrides]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("Instrument", Instrument)


class CorrectionRecord(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'CorrectionRecord')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    instrument = client.AttributeDescriptor(name='instrument', type_=Instrument, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    field = client.AttributeDescriptor(name='field', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    oldValue = client.AttributeDescriptor(name='oldValue', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    oldDateEntered = client.AttributeDescriptor(name='oldDateEntered', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    newValue = client.AttributeDescriptor(name='newValue', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    newDateEntered = client.AttributeDescriptor(name='newDateEntered', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timeEntered = client.AttributeDescriptor(name='timeEntered', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    exchangeIndicator = client.AttributeDescriptor(name='exchangeIndicator', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [instrument, field, oldValue, oldDateEntered, newValue, newDateEntered, timeEntered, exchangeIndicator]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("CorrectionRecord", CorrectionRecord)


class CorrectionRecords(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'CorrectionRecords')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    correctionRecord = client.AttributeDescriptor(name='correctionRecord', type_=CorrectionRecord, min='0', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [correctionRecord]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("CorrectionRecords", CorrectionRecords)


class Period(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'Period')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    start = client.AttributeDescriptor(name='start', type_=client.DateType, min='1', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    end = client.AttributeDescriptor(name='end', type_=client.DateType, min='1', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [start, end]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("Period", Period)


class DateRange(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'DateRange')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    period = client.AttributeDescriptor(name='period', type_=Period, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    duration = client.AttributeDescriptor(name='duration', type_=Duration, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [period, duration]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("DateRange", DateRange)


class FundInstrument(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'FundInstrument')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    id = client.AttributeDescriptor(name='id', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    yellowkey = client.AttributeDescriptor(name='yellowkey', type_=MarketSector, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    type = client.AttributeDescriptor(name='type', type_=InstrumentType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    overrides = client.AttributeDescriptor(name='overrides', type_=Overrides, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    period = client.AttributeDescriptor(name='period', type_=Period, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [id, yellowkey, type, overrides, period]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("FundInstrument", FundInstrument)


class Periodicity(client.EnumType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'Periodicity')
    _values = ['y', 'q', 's', 'a', 'c']
    y = 'y'
    q = 'q'
    s = 's'
    a = 'a'
    c = 'c'
Client.register("Periodicity", Periodicity)


class PortSecDes(client.EnumType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'PortSecDes')
    _values = ['adjusted']
    adjusted = 'adjusted'
Client.register("PortSecDes", PortSecDes)


class ProgramFlag(client.EnumType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'ProgramFlag')
    _values = ['oneshot', 'daily', 'weekly', 'monthly', 'weekday', 'weekend', 'adhoc']
    oneshot = 'oneshot'
    daily = 'daily'
    weekly = 'weekly'
    monthly = 'monthly'
    weekday = 'weekday'
    weekend = 'weekend'
    adhoc = 'adhoc'
Client.register("ProgramFlag", ProgramFlag)


class CancelHeaders(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'CancelHeaders')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    programflag = client.AttributeDescriptor(name='programflag', type_=ProgramFlag, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [programflag]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("CancelHeaders", CancelHeaders)


class SubmitCancelRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SubmitCancelRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, min='1', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    headers = client.AttributeDescriptor(name='headers', type_=CancelHeaders, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId, headers]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("SubmitCancelRequest", SubmitCancelRequest)


class submitCancelRequest(SubmitCancelRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'submitCancelRequest')
    _tag = 'submitCancelRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, min='1', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    headers = client.AttributeDescriptor(name='headers', type_=CancelHeaders, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId, headers]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("submitCancelRequest", submitCancelRequest)


class QRMQuoteData(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'QRMQuoteData')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    type = client.AttributeDescriptor(name='type', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    price = client.AttributeDescriptor(name='price', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    volume = client.AttributeDescriptor(name='volume', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    mm = client.AttributeDescriptor(name='mm', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    exCode = client.AttributeDescriptor(name='exCode', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _attributes = [type, price, volume, mm, exCode]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("QRMQuoteData", QRMQuoteData)


class QRMQuote(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'QRMQuote')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    matchedQuote = client.AttributeDescriptor(name='matchedQuote', type_=QRMQuoteData, min='1', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [matchedQuote]
    dateTime = client.AttributeDescriptor(name='dateTime', type_=client.DateTimeType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    condCode = client.AttributeDescriptor(name='condCode', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _attributes = [dateTime, condCode]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("QRMQuote", QRMQuote)


class QRMQuotes(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'QRMQuotes')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    quote = client.AttributeDescriptor(name='quote', type_=QRMQuote, min='0', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [quote]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("QRMQuotes", QRMQuotes)


class QRQuote(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'QRQuote')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    dateTime = client.AttributeDescriptor(name='dateTime', type_=client.DateTimeType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    price = client.AttributeDescriptor(name='price', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    volume = client.AttributeDescriptor(name='volume', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    exCode = client.AttributeDescriptor(name='exCode', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    condCode = client.AttributeDescriptor(name='condCode', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _attributes = [dateTime, price, volume, exCode, condCode]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("QRQuote", QRQuote)


class QRQuotes(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'QRQuotes')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    quote = client.AttributeDescriptor(name='quote', type_=QRQuote, min='0', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [quote]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("QRQuotes", QRQuotes)


class RegSolvency(client.EnumType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'RegSolvency')
    _values = ['no', 'packaged']
    no = 'no'
    packaged = 'packaged'
Client.register("RegSolvency", RegSolvency)


class ResponseStatus(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'ResponseStatus')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    code = client.AttributeDescriptor(name='code', type_=client.IntType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    description = client.AttributeDescriptor(name='description', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [code, description]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("ResponseStatus", ResponseStatus)


class MmktBvalDealInformation(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'MmktBvalDealInformation')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    clientDealId = client.AttributeDescriptor(name='clientDealId', type_=client.StringType, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    bbDealId = client.AttributeDescriptor(name='bbDealId', type_=client.StringType, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    dtcCusip = client.AttributeDescriptor(name='dtcCusip', type_=client.StringType, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    ticker = client.AttributeDescriptor(name='ticker', type_=client.StringType, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    programType = client.AttributeDescriptor(name='programType', type_=client.StringType, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    currency = client.AttributeDescriptor(name='currency', type_=client.StringType, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    maturity = client.AttributeDescriptor(name='maturity', type_=client.DateType, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, clientDealId, bbDealId, dtcCusip, ticker, programType, currency, maturity]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("MmktBvalDealInformation", MmktBvalDealInformation)


class MmktBvalDealInfos(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'MmktBvalDealInfos')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    deal = client.AttributeDescriptor(name='deal', type_=MmktBvalDealInformation, min='0', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [deal]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("MmktBvalDealInfos", MmktBvalDealInfos)


class OtcDealInformation(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'OtcDealInformation')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    customId = client.AttributeDescriptor(name='customId', type_=client.StringType, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    dealId = client.AttributeDescriptor(name='dealId', type_=client.StringType, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    dealType = client.AttributeDescriptor(name='dealType', type_=client.StringType, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    action = client.AttributeDescriptor(name='action', type_=OtcBvalAction, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    portfolioId = client.AttributeDescriptor(name='portfolioId', type_=client.StringType, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, customId, dealId, dealType, action, portfolioId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("OtcDealInformation", OtcDealInformation)


class OtcDealInfos(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'OtcDealInfos')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    deal = client.AttributeDescriptor(name='deal', type_=OtcDealInformation, min='0', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [deal]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("OtcDealInfos", OtcDealInfos)


class PerSecurityResponse(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'PerSecurityResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("PerSecurityResponse", PerSecurityResponse)


class GetCorrectionsResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'GetCorrectionsResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    headers = client.AttributeDescriptor(name='headers', type_=GetCorrectionsHeaders, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timestarted = client.AttributeDescriptor(name='timestarted', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    correctionRecords = client.AttributeDescriptor(name='correctionRecords', type_=CorrectionRecords, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timefinished = client.AttributeDescriptor(name='timefinished', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, headers, timestarted, correctionRecords, timefinished]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("GetCorrectionsResponse", GetCorrectionsResponse)


class getCorrectionsResponse(GetCorrectionsResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'getCorrectionsResponse')
    _tag = 'getCorrectionsResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    headers = client.AttributeDescriptor(name='headers', type_=GetCorrectionsHeaders, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timestarted = client.AttributeDescriptor(name='timestarted', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    correctionRecords = client.AttributeDescriptor(name='correctionRecords', type_=CorrectionRecords, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timefinished = client.AttributeDescriptor(name='timefinished', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, headers, timestarted, correctionRecords, timefinished]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("getCorrectionsResponse", getCorrectionsResponse)


class GetFieldsResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'GetFieldsResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fields = client.AttributeDescriptor(name='fields', type_=FieldInfos, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, fields]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("GetFieldsResponse", GetFieldsResponse)


class getFieldsResponse(GetFieldsResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'getFieldsResponse')
    _tag = 'getFieldsResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fields = client.AttributeDescriptor(name='fields', type_=FieldInfos, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, fields]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("getFieldsResponse", getFieldsResponse)


class RetrieveCancelResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'RetrieveCancelResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    headers = client.AttributeDescriptor(name='headers', type_=CancelHeaders, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    cancelResponseStatus = client.AttributeDescriptor(name='cancelResponseStatus', type_=CancelResponseStatus, min='1', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, headers, cancelResponseStatus]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("RetrieveCancelResponse", RetrieveCancelResponse)


class retrieveCancelResponse(RetrieveCancelResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'retrieveCancelResponse')
    _tag = 'retrieveCancelResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    headers = client.AttributeDescriptor(name='headers', type_=CancelHeaders, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    cancelResponseStatus = client.AttributeDescriptor(name='cancelResponseStatus', type_=CancelResponseStatus, min='1', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, headers, cancelResponseStatus]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("retrieveCancelResponse", retrieveCancelResponse)


class RetrieveMmktBvalDealsUploadResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'RetrieveMmktBvalDealsUploadResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timestarted = client.AttributeDescriptor(name='timestarted', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    deals = client.AttributeDescriptor(name='deals', type_=MmktBvalDealInfos, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timefinished = client.AttributeDescriptor(name='timefinished', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId, timestarted, deals, timefinished]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("RetrieveMmktBvalDealsUploadResponse", RetrieveMmktBvalDealsUploadResponse)


class retrieveMmktBvalDealsUploadResponse(RetrieveMmktBvalDealsUploadResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'retrieveMmktBvalDealsUploadResponse')
    _tag = 'retrieveMmktBvalDealsUploadResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timestarted = client.AttributeDescriptor(name='timestarted', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    deals = client.AttributeDescriptor(name='deals', type_=MmktBvalDealInfos, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timefinished = client.AttributeDescriptor(name='timefinished', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId, timestarted, deals, timefinished]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("retrieveMmktBvalDealsUploadResponse", retrieveMmktBvalDealsUploadResponse)


class RetrieveOtcBvalDealsUploadResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'RetrieveOtcBvalDealsUploadResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timestarted = client.AttributeDescriptor(name='timestarted', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    deals = client.AttributeDescriptor(name='deals', type_=OtcDealInfos, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timefinished = client.AttributeDescriptor(name='timefinished', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId, timestarted, deals, timefinished]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("RetrieveOtcBvalDealsUploadResponse", RetrieveOtcBvalDealsUploadResponse)


class retrieveOtcBvalDealsUploadResponse(RetrieveOtcBvalDealsUploadResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'retrieveOtcBvalDealsUploadResponse')
    _tag = 'retrieveOtcBvalDealsUploadResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timestarted = client.AttributeDescriptor(name='timestarted', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    deals = client.AttributeDescriptor(name='deals', type_=OtcDealInfos, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timefinished = client.AttributeDescriptor(name='timefinished', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId, timestarted, deals, timefinished]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("retrieveOtcBvalDealsUploadResponse", retrieveOtcBvalDealsUploadResponse)


class RetrieveOtcbvalUploadResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'RetrieveOtcbvalUploadResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    response = client.AttributeDescriptor(name='response', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId, response]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("RetrieveOtcbvalUploadResponse", RetrieveOtcbvalUploadResponse)


class retrieveOtcbvalUploadResponse(RetrieveOtcbvalUploadResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'retrieveOtcbvalUploadResponse')
    _tag = 'retrieveOtcbvalUploadResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    response = client.AttributeDescriptor(name='response', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId, response]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("retrieveOtcbvalUploadResponse", retrieveOtcbvalUploadResponse)


class SubmitCancelResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SubmitCancelResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("SubmitCancelResponse", SubmitCancelResponse)


class submitCancelResponse(SubmitCancelResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'submitCancelResponse')
    _tag = 'submitCancelResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("submitCancelResponse", submitCancelResponse)


class SubmitGetActionsResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SubmitGetActionsResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("SubmitGetActionsResponse", SubmitGetActionsResponse)


class submitGetActionsResponse(SubmitGetActionsResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'submitGetActionsResponse')
    _tag = 'submitGetActionsResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("submitGetActionsResponse", submitGetActionsResponse)


class SubmitGetAllQuotesResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SubmitGetAllQuotesResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("SubmitGetAllQuotesResponse", SubmitGetAllQuotesResponse)


class submitGetAllQuotesResponse(SubmitGetAllQuotesResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'submitGetAllQuotesResponse')
    _tag = 'submitGetAllQuotesResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("submitGetAllQuotesResponse", submitGetAllQuotesResponse)


class SubmitGetCompanyResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SubmitGetCompanyResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("SubmitGetCompanyResponse", SubmitGetCompanyResponse)


class submitGetCompanyResponse(SubmitGetCompanyResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'submitGetCompanyResponse')
    _tag = 'submitGetCompanyResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("submitGetCompanyResponse", submitGetCompanyResponse)


class SubmitGetDataResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SubmitGetDataResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("SubmitGetDataResponse", SubmitGetDataResponse)


class submitGetDataResponse(SubmitGetDataResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'submitGetDataResponse')
    _tag = 'submitGetDataResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("submitGetDataResponse", submitGetDataResponse)


class SubmitGetFundamentalsResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SubmitGetFundamentalsResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("SubmitGetFundamentalsResponse", SubmitGetFundamentalsResponse)


class submitGetFundamentalsResponse(SubmitGetFundamentalsResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'submitGetFundamentalsResponse')
    _tag = 'submitGetFundamentalsResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("submitGetFundamentalsResponse", submitGetFundamentalsResponse)


class SubmitGetHistoryResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SubmitGetHistoryResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("SubmitGetHistoryResponse", SubmitGetHistoryResponse)


class submitGetHistoryResponse(SubmitGetHistoryResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'submitGetHistoryResponse')
    _tag = 'submitGetHistoryResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("submitGetHistoryResponse", submitGetHistoryResponse)


class SubmitGetQuotesResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SubmitGetQuotesResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("SubmitGetQuotesResponse", SubmitGetQuotesResponse)


class submitGetQuotesResponse(SubmitGetQuotesResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'submitGetQuotesResponse')
    _tag = 'submitGetQuotesResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("submitGetQuotesResponse", submitGetQuotesResponse)


class SubmitMmktBvalDealsUploadResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SubmitMmktBvalDealsUploadResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("SubmitMmktBvalDealsUploadResponse", SubmitMmktBvalDealsUploadResponse)


class submitMmktBvalDealsUploadResponse(SubmitMmktBvalDealsUploadResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'submitMmktBvalDealsUploadResponse')
    _tag = 'submitMmktBvalDealsUploadResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("submitMmktBvalDealsUploadResponse", submitMmktBvalDealsUploadResponse)


class SubmitOtcBvalDealsUploadResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SubmitOtcBvalDealsUploadResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("SubmitOtcBvalDealsUploadResponse", SubmitOtcBvalDealsUploadResponse)


class submitOtcBvalDealsUploadResponse(SubmitOtcBvalDealsUploadResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'submitOtcBvalDealsUploadResponse')
    _tag = 'submitOtcBvalDealsUploadResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("submitOtcBvalDealsUploadResponse", submitOtcBvalDealsUploadResponse)


class SubmitOtcbvalUploadResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SubmitOtcbvalUploadResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("SubmitOtcbvalUploadResponse", SubmitOtcbvalUploadResponse)


class submitOtcbvalUploadResponse(SubmitOtcbvalUploadResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'submitOtcbvalUploadResponse')
    _tag = 'submitOtcbvalUploadResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("submitOtcbvalUploadResponse", submitOtcbvalUploadResponse)


class SubmitScheduledResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SubmitScheduledResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("SubmitScheduledResponse", SubmitScheduledResponse)


class submitScheduledResponse(SubmitScheduledResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'submitScheduledResponse')
    _tag = 'submitScheduledResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("submitScheduledResponse", submitScheduledResponse)


class RetrieveCancelRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'RetrieveCancelRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("RetrieveCancelRequest", RetrieveCancelRequest)


class retrieveCancelRequest(RetrieveCancelRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'retrieveCancelRequest')
    _tag = 'retrieveCancelRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("retrieveCancelRequest", retrieveCancelRequest)


class RetrieveGetActionsRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'RetrieveGetActionsRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseDate = client.AttributeDescriptor(name='responseDate', type_=client.DateType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId, responseDate]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("RetrieveGetActionsRequest", RetrieveGetActionsRequest)


class retrieveGetActionsRequest(RetrieveGetActionsRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'retrieveGetActionsRequest')
    _tag = 'retrieveGetActionsRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseDate = client.AttributeDescriptor(name='responseDate', type_=client.DateType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId, responseDate]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("retrieveGetActionsRequest", retrieveGetActionsRequest)


class RetrieveGetAllQuotesRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'RetrieveGetAllQuotesRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseDate = client.AttributeDescriptor(name='responseDate', type_=client.DateType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId, responseDate]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("RetrieveGetAllQuotesRequest", RetrieveGetAllQuotesRequest)


class retrieveGetAllQuotesRequest(RetrieveGetAllQuotesRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'retrieveGetAllQuotesRequest')
    _tag = 'retrieveGetAllQuotesRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseDate = client.AttributeDescriptor(name='responseDate', type_=client.DateType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId, responseDate]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("retrieveGetAllQuotesRequest", retrieveGetAllQuotesRequest)


class RetrieveGetCompanyRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'RetrieveGetCompanyRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseDate = client.AttributeDescriptor(name='responseDate', type_=client.DateType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId, responseDate]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("RetrieveGetCompanyRequest", RetrieveGetCompanyRequest)


class retrieveGetCompanyRequest(RetrieveGetCompanyRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'retrieveGetCompanyRequest')
    _tag = 'retrieveGetCompanyRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseDate = client.AttributeDescriptor(name='responseDate', type_=client.DateType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId, responseDate]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("retrieveGetCompanyRequest", retrieveGetCompanyRequest)


class RetrieveGetDataRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'RetrieveGetDataRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseDate = client.AttributeDescriptor(name='responseDate', type_=client.DateType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId, responseDate]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("RetrieveGetDataRequest", RetrieveGetDataRequest)


class retrieveGetDataRequest(RetrieveGetDataRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'retrieveGetDataRequest')
    _tag = 'retrieveGetDataRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseDate = client.AttributeDescriptor(name='responseDate', type_=client.DateType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId, responseDate]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("retrieveGetDataRequest", retrieveGetDataRequest)


class RetrieveGetFundamentalsRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'RetrieveGetFundamentalsRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseDate = client.AttributeDescriptor(name='responseDate', type_=client.DateType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId, responseDate]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("RetrieveGetFundamentalsRequest", RetrieveGetFundamentalsRequest)


class retrieveGetFundamentalsRequest(RetrieveGetFundamentalsRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'retrieveGetFundamentalsRequest')
    _tag = 'retrieveGetFundamentalsRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseDate = client.AttributeDescriptor(name='responseDate', type_=client.DateType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId, responseDate]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("retrieveGetFundamentalsRequest", retrieveGetFundamentalsRequest)


class RetrieveGetHistoryRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'RetrieveGetHistoryRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseDate = client.AttributeDescriptor(name='responseDate', type_=client.DateType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId, responseDate]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("RetrieveGetHistoryRequest", RetrieveGetHistoryRequest)


class retrieveGetHistoryRequest(RetrieveGetHistoryRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'retrieveGetHistoryRequest')
    _tag = 'retrieveGetHistoryRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseDate = client.AttributeDescriptor(name='responseDate', type_=client.DateType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId, responseDate]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("retrieveGetHistoryRequest", retrieveGetHistoryRequest)


class RetrieveGetQuotesRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'RetrieveGetQuotesRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseDate = client.AttributeDescriptor(name='responseDate', type_=client.DateType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId, responseDate]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("RetrieveGetQuotesRequest", RetrieveGetQuotesRequest)


class retrieveGetQuotesRequest(RetrieveGetQuotesRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'retrieveGetQuotesRequest')
    _tag = 'retrieveGetQuotesRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseDate = client.AttributeDescriptor(name='responseDate', type_=client.DateType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId, responseDate]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("retrieveGetQuotesRequest", retrieveGetQuotesRequest)


class RetrieveMmktBvalDealsUploadRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'RetrieveMmktBvalDealsUploadRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseDate = client.AttributeDescriptor(name='responseDate', type_=client.DateType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId, responseDate]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("RetrieveMmktBvalDealsUploadRequest", RetrieveMmktBvalDealsUploadRequest)


class retrieveMmktBvalDealsUploadRequest(RetrieveMmktBvalDealsUploadRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'retrieveMmktBvalDealsUploadRequest')
    _tag = 'retrieveMmktBvalDealsUploadRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseDate = client.AttributeDescriptor(name='responseDate', type_=client.DateType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId, responseDate]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("retrieveMmktBvalDealsUploadRequest", retrieveMmktBvalDealsUploadRequest)


class RetrieveOtcBvalDealsUploadRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'RetrieveOtcBvalDealsUploadRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseDate = client.AttributeDescriptor(name='responseDate', type_=client.DateType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId, responseDate]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("RetrieveOtcBvalDealsUploadRequest", RetrieveOtcBvalDealsUploadRequest)


class retrieveOtcBvalDealsUploadRequest(RetrieveOtcBvalDealsUploadRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'retrieveOtcBvalDealsUploadRequest')
    _tag = 'retrieveOtcBvalDealsUploadRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseDate = client.AttributeDescriptor(name='responseDate', type_=client.DateType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId, responseDate]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("retrieveOtcBvalDealsUploadRequest", retrieveOtcBvalDealsUploadRequest)


class RetrieveOtcbvalUploadRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'RetrieveOtcbvalUploadRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseDate = client.AttributeDescriptor(name='responseDate', type_=client.DateType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId, responseDate]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("RetrieveOtcbvalUploadRequest", RetrieveOtcbvalUploadRequest)


class retrieveOtcbvalUploadRequest(RetrieveOtcbvalUploadRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'retrieveOtcbvalUploadRequest')
    _tag = 'retrieveOtcbvalUploadRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseDate = client.AttributeDescriptor(name='responseDate', type_=client.DateType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId, responseDate]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("retrieveOtcbvalUploadRequest", retrieveOtcbvalUploadRequest)


class RetrieveScheduledRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'RetrieveScheduledRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("RetrieveScheduledRequest", RetrieveScheduledRequest)


class retrieveScheduledRequest(RetrieveScheduledRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'retrieveScheduledRequest')
    _tag = 'retrieveScheduledRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [responseId]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("retrieveScheduledRequest", retrieveScheduledRequest)


class SecondaryQualifierOperator(client.EnumType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SecondaryQualifierOperator')
    _values = ['Equals', 'NotEquals', 'GreaterThan', 'LessThan']
    Equals = 'Equals'
    NotEquals = 'NotEquals'
    GreaterThan = 'GreaterThan'
    LessThan = 'LessThan'
Client.register("SecondaryQualifierOperator", SecondaryQualifierOperator)


class SecondaryQualifierType(client.EnumType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SecondaryQualifierType')
    _values = ['ACTIVE_PRICING', 'COUNTRY', 'CPN_TYP', 'CRNCY', 'EXCH_TRADED', 'MATURED', 'NET_CPN', 'RATE', 'RATING', 'SECURITY_DES', 'SECURITY_TYP', 'SERIES', 'TICKER', 'WAC', 'WALA', 'WAM', 'BVAL_OTC_FREQUENCY', 'BVAL_OTC_EXPIRED', 'BVAL_OTC_ASSET', 'BVAL_OTC_SNAPSHOT', 'BVAL_OTC_UNWOUND']
    ACTIVE_PRICING = 'ACTIVE_PRICING'
    COUNTRY = 'COUNTRY'
    CPN_TYP = 'CPN_TYP'
    CRNCY = 'CRNCY'
    EXCH_TRADED = 'EXCH_TRADED'
    MATURED = 'MATURED'
    NET_CPN = 'NET_CPN'
    RATE = 'RATE'
    RATING = 'RATING'
    SECURITY_DES = 'SECURITY_DES'
    SECURITY_TYP = 'SECURITY_TYP'
    SERIES = 'SERIES'
    TICKER = 'TICKER'
    WAC = 'WAC'
    WALA = 'WALA'
    WAM = 'WAM'
    BVAL_OTC_FREQUENCY = 'BVAL_OTC_FREQUENCY'
    BVAL_OTC_EXPIRED = 'BVAL_OTC_EXPIRED'
    BVAL_OTC_ASSET = 'BVAL_OTC_ASSET'
    BVAL_OTC_SNAPSHOT = 'BVAL_OTC_SNAPSHOT'
    BVAL_OTC_UNWOUND = 'BVAL_OTC_UNWOUND'
Client.register("SecondaryQualifierType", SecondaryQualifierType)


class SecondaryQualifier(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SecondaryQualifier')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    secondaryQualifierType = client.AttributeDescriptor(name='secondaryQualifierType', type_=SecondaryQualifierType, min='1', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    secondaryQualifierOperator = client.AttributeDescriptor(name='secondaryQualifierOperator', type_=SecondaryQualifierOperator, min='1', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    secondaryQualifierValue = client.AttributeDescriptor(name='secondaryQualifierValue', type_=client.StringType, min='1', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [secondaryQualifierType, secondaryQualifierOperator, secondaryQualifierValue]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("SecondaryQualifier", SecondaryQualifier)


class Macro(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'Macro')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    primaryQualifier = client.AttributeDescriptor(name='primaryQualifier', type_=PrimaryQualifier, min='1', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    secondaryQualifier = client.AttributeDescriptor(name='secondaryQualifier', type_=SecondaryQualifier, min='0', max='7', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    overrides = client.AttributeDescriptor(name='overrides', type_=Overrides, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [primaryQualifier, secondaryQualifier, overrides]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("Macro", Macro)


class ActionsInstrumentData(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'ActionsInstrumentData')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    code = client.AttributeDescriptor(name='code', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instrument = client.AttributeDescriptor(name='instrument', type_=Instrument, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    macro = client.AttributeDescriptor(name='macro', type_=Macro, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    standardFields = client.AttributeDescriptor(name='standardFields', type_=ActionStandardFields, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    data = client.AttributeDescriptor(name='data', type_=Data, min='0', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [code, instrument, macro, standardFields, data]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("ActionsInstrumentData", ActionsInstrumentData)


class ActionsInstrumentDatas(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'ActionsInstrumentDatas')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    instrumentData = client.AttributeDescriptor(name='instrumentData', type_=ActionsInstrumentData, min='0', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [instrumentData]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("ActionsInstrumentDatas", ActionsInstrumentDatas)


class AllQuotesInstrumentData(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'AllQuotesInstrumentData')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    instrument = client.AttributeDescriptor(name='instrument', type_=Instrument, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    macro = client.AttributeDescriptor(name='macro', type_=Macro, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    pcs = client.AttributeDescriptor(name='pcs', type_=client.StringType, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    quotes = client.AttributeDescriptor(name='quotes', type_=QRMQuotes, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    code = client.AttributeDescriptor(name='code', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [instrument, macro, pcs, quotes, code]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("AllQuotesInstrumentData", AllQuotesInstrumentData)


class AllQuotesInstrumentDatas(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'AllQuotesInstrumentDatas')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    instrumentData = client.AttributeDescriptor(name='instrumentData', type_=AllQuotesInstrumentData, min='0', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [instrumentData]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("AllQuotesInstrumentDatas", AllQuotesInstrumentDatas)


class FundInstrumentData(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'FundInstrumentData')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    code = client.AttributeDescriptor(name='code', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instrument = client.AttributeDescriptor(name='instrument', type_=FundInstrument, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    macro = client.AttributeDescriptor(name='macro', type_=Macro, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    data = client.AttributeDescriptor(name='data', type_=Data, min='0', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [code, instrument, macro, data]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("FundInstrumentData", FundInstrumentData)


class FundInstrumentDatas(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'FundInstrumentDatas')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    instrumentData = client.AttributeDescriptor(name='instrumentData', type_=FundInstrumentData, min='0', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [instrumentData]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("FundInstrumentDatas", FundInstrumentDatas)


class FundInstruments(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'FundInstruments')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    instrument = client.AttributeDescriptor(name='instrument', type_=FundInstrument, min='0', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    macro = client.AttributeDescriptor(name='macro', type_=Macro, min='0', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [instrument, macro]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("FundInstruments", FundInstruments)


class HistInstrumentData(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'HistInstrumentData')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    code = client.AttributeDescriptor(name='code', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instrument = client.AttributeDescriptor(name='instrument', type_=Instrument, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    macro = client.AttributeDescriptor(name='macro', type_=Macro, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    pricingSource = client.AttributeDescriptor(name='pricingSource', type_=client.StringType, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    date = client.AttributeDescriptor(name='date', type_=client.DateType, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    data = client.AttributeDescriptor(name='data', type_=HistData, min='0', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [code, instrument, macro, pricingSource, date, data]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("HistInstrumentData", HistInstrumentData)


class HistInstrumentDatas(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'HistInstrumentDatas')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    instrumentData = client.AttributeDescriptor(name='instrumentData', type_=HistInstrumentData, min='0', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [instrumentData]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("HistInstrumentDatas", HistInstrumentDatas)


class InstrumentData(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'InstrumentData')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    code = client.AttributeDescriptor(name='code', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instrument = client.AttributeDescriptor(name='instrument', type_=Instrument, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    macro = client.AttributeDescriptor(name='macro', type_=Macro, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    data = client.AttributeDescriptor(name='data', type_=Data, min='0', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [code, instrument, macro, data]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("InstrumentData", InstrumentData)


class InstrumentDatas(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'InstrumentDatas')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    instrumentData = client.AttributeDescriptor(name='instrumentData', type_=InstrumentData, min='0', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [instrumentData]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("InstrumentDatas", InstrumentDatas)


class Instruments(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'Instruments')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    instrument = client.AttributeDescriptor(name='instrument', type_=Instrument, min='0', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    macro = client.AttributeDescriptor(name='macro', type_=Macro, min='0', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [instrument, macro]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("Instruments", Instruments)


class QuotesInstrumentData(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'QuotesInstrumentData')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    instrument = client.AttributeDescriptor(name='instrument', type_=Instrument, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    macro = client.AttributeDescriptor(name='macro', type_=Macro, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    pcs = client.AttributeDescriptor(name='pcs', type_=client.StringType, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    quotes = client.AttributeDescriptor(name='quotes', type_=QRQuotes, min='0', max='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    code = client.AttributeDescriptor(name='code', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [instrument, macro, pcs, quotes, code]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("QuotesInstrumentData", QuotesInstrumentData)


class QuotesInstrumentDatas(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'QuotesInstrumentDatas')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    instrumentData = client.AttributeDescriptor(name='instrumentData', type_=QuotesInstrumentData, min='0', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [instrumentData]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("QuotesInstrumentDatas", QuotesInstrumentDatas)


class SpecialChar(client.EnumType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SpecialChar')
    _values = ['fraction', 'decimal', 'altdecimal']
    fraction = 'fraction'
    decimal = 'decimal'
    altdecimal = 'altdecimal'
Client.register("SpecialChar", SpecialChar)


class SubmitScheduledRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SubmitScheduledRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("SubmitScheduledRequest", SubmitScheduledRequest)


class submitScheduledRequest(SubmitScheduledRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'submitScheduledRequest')
    _tag = 'submitScheduledRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("submitScheduledRequest", submitScheduledRequest)


class TickOutputTz(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'TickOutputTz')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    timezone = client.AttributeDescriptor(name='timezone', type_=client.StringType, min='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    dst = client.AttributeDescriptor(name='dst', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [timezone, dst]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("TickOutputTz", TickOutputTz)


class Version(client.EnumType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'Version')
    _values = ['new']
    new = 'new'
Client.register("Version", Version)


class GetActionsHeaders(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'GetActionsHeaders')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    actions = client.AttributeDescriptor(name='actions', type_=Actions, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    actions_date = client.AttributeDescriptor(name='actions_date', type_=ActionsDate, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    daterange = client.AttributeDescriptor(name='daterange', type_=DateRange, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    dateformat = client.AttributeDescriptor(name='dateformat', type_=DateFormat, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    programflag = client.AttributeDescriptor(name='programflag', type_=ProgramFlag, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    rundate = client.AttributeDescriptor(name='rundate', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    time = client.AttributeDescriptor(name='time', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    secid = client.AttributeDescriptor(name='secid', type_=InstrumentType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    sn = client.AttributeDescriptor(name='sn', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    usernumber = client.AttributeDescriptor(name='usernumber', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    version = client.AttributeDescriptor(name='version', type_=Version, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    ws = client.AttributeDescriptor(name='ws', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    yellowkey = client.AttributeDescriptor(name='yellowkey', type_=MarketSector, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [actions, actions_date, daterange, dateformat, programflag, rundate, time, secid, sn, usernumber, version, ws, yellowkey]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("GetActionsHeaders", GetActionsHeaders)


class GetCompanyHeaders(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'GetCompanyHeaders')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    creditrisk = client.AttributeDescriptor(name='creditrisk', type_=client.BooleanType, min='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    dateformat = client.AttributeDescriptor(name='dateformat', type_=DateFormat, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    programflag = client.AttributeDescriptor(name='programflag', type_=ProgramFlag, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    rundate = client.AttributeDescriptor(name='rundate', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    secid = client.AttributeDescriptor(name='secid', type_=InstrumentType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    sn = client.AttributeDescriptor(name='sn', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    specialchar = client.AttributeDescriptor(name='specialchar', type_=SpecialChar, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    time = client.AttributeDescriptor(name='time', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    usernumber = client.AttributeDescriptor(name='usernumber', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    version = client.AttributeDescriptor(name='version', type_=Version, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    ws = client.AttributeDescriptor(name='ws', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    yellowkey = client.AttributeDescriptor(name='yellowkey', type_=MarketSector, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [creditrisk, dateformat, programflag, rundate, secid, sn, specialchar, time, usernumber, version, ws, yellowkey]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("GetCompanyHeaders", GetCompanyHeaders)


class GetDataHeaders(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'GetDataHeaders')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    closingvalues = client.AttributeDescriptor(name='closingvalues', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    dateformat = client.AttributeDescriptor(name='dateformat', type_=DateFormat, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    derived = client.AttributeDescriptor(name='derived', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    diffflag = client.AttributeDescriptor(name='diffflag', type_=DiffFlag, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    hist_crncy = client.AttributeDescriptor(name='hist_crncy', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    historical = client.AttributeDescriptor(name='historical', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    programflag = client.AttributeDescriptor(name='programflag', type_=ProgramFlag, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    rundate = client.AttributeDescriptor(name='rundate', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    secid = client.AttributeDescriptor(name='secid', type_=InstrumentType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    secmaster = client.AttributeDescriptor(name='secmaster', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    sn = client.AttributeDescriptor(name='sn', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    specialchar = client.AttributeDescriptor(name='specialchar', type_=SpecialChar, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    time = client.AttributeDescriptor(name='time', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    login = client.AttributeDescriptor(name='login', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    usernumber = client.AttributeDescriptor(name='usernumber', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    version = client.AttributeDescriptor(name='version', type_=Version, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    ws = client.AttributeDescriptor(name='ws', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    yellowkey = client.AttributeDescriptor(name='yellowkey', type_=MarketSector, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    quotecomposite = client.AttributeDescriptor(name='quotecomposite', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    creditrisk = client.AttributeDescriptor(name='creditrisk', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    quotecompositehist = client.AttributeDescriptor(name='quotecompositehist', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    exclusive_pricing_src = client.AttributeDescriptor(name='exclusive_pricing_src', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    estimates = client.AttributeDescriptor(name='estimates', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    bvaltier = client.AttributeDescriptor(name='bvaltier', type_=BvalTier, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    bvalsnapshot = client.AttributeDescriptor(name='bvalsnapshot', type_=BvalSnapshot, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    bvalsnapshotdate = client.AttributeDescriptor(name='bvalsnapshotdate', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    bvalbeta = client.AttributeDescriptor(name='bvalbeta', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    pricing_source = client.AttributeDescriptor(name='pricing_source', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    portsecdes = client.AttributeDescriptor(name='portsecdes', type_=PortSecDes, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    prp = client.AttributeDescriptor(name='prp', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fundamentals = client.AttributeDescriptor(name='fundamentals', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    pricing = client.AttributeDescriptor(name='pricing', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    skip_pcs = client.AttributeDescriptor(name='skip_pcs', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    vol_surface = client.AttributeDescriptor(name='vol_surface', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    regssfa = client.AttributeDescriptor(name='regssfa', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    regfvhl = client.AttributeDescriptor(name='regfvhl', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    regtransparency = client.AttributeDescriptor(name='regtransparency', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    regcomp = client.AttributeDescriptor(name='regcomp', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    corpstruct = client.AttributeDescriptor(name='corpstruct', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    capstruct = client.AttributeDescriptor(name='capstruct', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    regsolvency = client.AttributeDescriptor(name='regsolvency', type_=RegSolvency, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    reghqla = client.AttributeDescriptor(name='reghqla', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    reghqlaamer = client.AttributeDescriptor(name='reghqlaamer', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    reghqlaeuro = client.AttributeDescriptor(name='reghqlaeuro', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    reghqlaasia = client.AttributeDescriptor(name='reghqlaasia', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    regcbe = client.AttributeDescriptor(name='regcbe', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    regcfid = client.AttributeDescriptor(name='regcfid', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    reglqa = client.AttributeDescriptor(name='reglqa', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    mifir = client.AttributeDescriptor(name='mifir', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    defaultrisk = client.AttributeDescriptor(name='defaultrisk', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    ifrs9sppi = client.AttributeDescriptor(name='ifrs9sppi', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    coltag = client.AttributeDescriptor(name='coltag', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    uswhldtax = client.AttributeDescriptor(name='uswhldtax', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    regecl = client.AttributeDescriptor(name='regecl', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    basictax = client.AttributeDescriptor(name='basictax', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    invstprot = client.AttributeDescriptor(name='invstprot', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    encoding = client.AttributeDescriptor(name='encoding', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [closingvalues, dateformat, derived, diffflag, hist_crncy, historical, programflag, rundate, secid, secmaster, sn, specialchar, time, login, usernumber, version, ws, yellowkey, quotecomposite, creditrisk, quotecompositehist, exclusive_pricing_src, estimates, bvaltier, bvalsnapshot, bvalsnapshotdate, bvalbeta, pricing_source, portsecdes, prp, fundamentals, pricing, skip_pcs, vol_surface, regssfa, regfvhl, regtransparency, regcomp, corpstruct, capstruct, regsolvency, reghqla, reghqlaamer, reghqlaeuro, reghqlaasia, regcbe, regcfid, reglqa, mifir, defaultrisk, ifrs9sppi, coltag, uswhldtax, regecl, basictax, invstprot, encoding]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("GetDataHeaders", GetDataHeaders)


class GetFundamentalsHeaders(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'GetFundamentalsHeaders')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    filingstatus = client.AttributeDescriptor(name='filingstatus', type_=FilingStatus, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    currency = client.AttributeDescriptor(name='currency', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    daterange = client.AttributeDescriptor(name='daterange', type_=DateRange, min='1', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    periodicity = client.AttributeDescriptor(name='periodicity', type_=Periodicity, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    consolidated = client.AttributeDescriptor(name='consolidated', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    adjusted = client.AttributeDescriptor(name='adjusted', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    programflag = client.AttributeDescriptor(name='programflag', type_=ProgramFlag, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    rundate = client.AttributeDescriptor(name='rundate', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    time = client.AttributeDescriptor(name='time', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    secid = client.AttributeDescriptor(name='secid', type_=InstrumentType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    sn = client.AttributeDescriptor(name='sn', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    usernumber = client.AttributeDescriptor(name='usernumber', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    version = client.AttributeDescriptor(name='version', type_=Version, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    ws = client.AttributeDescriptor(name='ws', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    yellowkey = client.AttributeDescriptor(name='yellowkey', type_=MarketSector, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [filingstatus, currency, daterange, periodicity, consolidated, adjusted, programflag, rundate, time, secid, sn, usernumber, version, ws, yellowkey]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("GetFundamentalsHeaders", GetFundamentalsHeaders)


class GetHistoryHeaders(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'GetHistoryHeaders')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    daterange = client.AttributeDescriptor(name='daterange', type_=DateRange, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    hist_crncy = client.AttributeDescriptor(name='hist_crncy', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    hist_period = client.AttributeDescriptor(name='hist_period', type_=HistPeriod, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    hist_option = client.AttributeDescriptor(name='hist_option', type_=HistOption, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    programflag = client.AttributeDescriptor(name='programflag', type_=ProgramFlag, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    pricing_source = client.AttributeDescriptor(name='pricing_source', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    display_pricing_src = client.AttributeDescriptor(name='display_pricing_src', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    rundate = client.AttributeDescriptor(name='rundate', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    time = client.AttributeDescriptor(name='time', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    secid = client.AttributeDescriptor(name='secid', type_=InstrumentType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    sn = client.AttributeDescriptor(name='sn', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    login = client.AttributeDescriptor(name='login', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    usernumber = client.AttributeDescriptor(name='usernumber', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    version = client.AttributeDescriptor(name='version', type_=Version, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    ws = client.AttributeDescriptor(name='ws', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    yellowkey = client.AttributeDescriptor(name='yellowkey', type_=MarketSector, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    portsecdes = client.AttributeDescriptor(name='portsecdes', type_=PortSecDes, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    prp = client.AttributeDescriptor(name='prp', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    exclusive_pricing_src = client.AttributeDescriptor(name='exclusive_pricing_src', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    bvalbeta = client.AttributeDescriptor(name='bvalbeta', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    regfvhl = client.AttributeDescriptor(name='regfvhl', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    regtransparency = client.AttributeDescriptor(name='regtransparency', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [daterange, hist_crncy, hist_period, hist_option, programflag, pricing_source, display_pricing_src, rundate, time, secid, sn, login, usernumber, version, ws, yellowkey, portsecdes, prp, exclusive_pricing_src, bvalbeta, regfvhl, regtransparency]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("GetHistoryHeaders", GetHistoryHeaders)


class GetPortfolioValidationHeaders(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'GetPortfolioValidationHeaders')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    closingvalues = client.AttributeDescriptor(name='closingvalues', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    dateformat = client.AttributeDescriptor(name='dateformat', type_=DateFormat, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    derived = client.AttributeDescriptor(name='derived', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    diffflag = client.AttributeDescriptor(name='diffflag', type_=DiffFlag, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    hist_crncy = client.AttributeDescriptor(name='hist_crncy', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    historical = client.AttributeDescriptor(name='historical', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    programflag = client.AttributeDescriptor(name='programflag', type_=ProgramFlag, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    rundate = client.AttributeDescriptor(name='rundate', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    secid = client.AttributeDescriptor(name='secid', type_=InstrumentType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    secmaster = client.AttributeDescriptor(name='secmaster', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    sn = client.AttributeDescriptor(name='sn', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    specialchar = client.AttributeDescriptor(name='specialchar', type_=SpecialChar, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    time = client.AttributeDescriptor(name='time', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    login = client.AttributeDescriptor(name='login', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    usernumber = client.AttributeDescriptor(name='usernumber', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    version = client.AttributeDescriptor(name='version', type_=Version, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    ws = client.AttributeDescriptor(name='ws', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    yellowkey = client.AttributeDescriptor(name='yellowkey', type_=MarketSector, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    exclusive_pricing_src = client.AttributeDescriptor(name='exclusive_pricing_src', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    bvaltier = client.AttributeDescriptor(name='bvaltier', type_=BvalTier, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    bvalsnapshot = client.AttributeDescriptor(name='bvalsnapshot', type_=BvalSnapshot, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    bvalsnapshotdate = client.AttributeDescriptor(name='bvalsnapshotdate', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    bvalbeta = client.AttributeDescriptor(name='bvalbeta', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    pricing_source = client.AttributeDescriptor(name='pricing_source', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    portsecdes = client.AttributeDescriptor(name='portsecdes', type_=PortSecDes, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    prp = client.AttributeDescriptor(name='prp', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [closingvalues, dateformat, derived, diffflag, hist_crncy, historical, programflag, rundate, secid, secmaster, sn, specialchar, time, login, usernumber, version, ws, yellowkey, exclusive_pricing_src, bvaltier, bvalsnapshot, bvalsnapshotdate, bvalbeta, pricing_source, portsecdes, prp]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("GetPortfolioValidationHeaders", GetPortfolioValidationHeaders)


class GetPortfolioValidationResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'GetPortfolioValidationResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    headers = client.AttributeDescriptor(name='headers', type_=GetPortfolioValidationHeaders, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fields = client.AttributeDescriptor(name='fields', type_=Fields, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timestarted = client.AttributeDescriptor(name='timestarted', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instrumentDatas = client.AttributeDescriptor(name='instrumentDatas', type_=InstrumentDatas, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timefinished = client.AttributeDescriptor(name='timefinished', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId, headers, fields, timestarted, instrumentDatas, timefinished]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("GetPortfolioValidationResponse", GetPortfolioValidationResponse)


class getPortfolioValidationResponse(GetPortfolioValidationResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'getPortfolioValidationResponse')
    _tag = 'getPortfolioValidationResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    headers = client.AttributeDescriptor(name='headers', type_=GetPortfolioValidationHeaders, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fields = client.AttributeDescriptor(name='fields', type_=Fields, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timestarted = client.AttributeDescriptor(name='timestarted', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instrumentDatas = client.AttributeDescriptor(name='instrumentDatas', type_=InstrumentDatas, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timefinished = client.AttributeDescriptor(name='timefinished', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId, headers, fields, timestarted, instrumentDatas, timefinished]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("getPortfolioValidationResponse", getPortfolioValidationResponse)


class RetrieveGetActionsResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'RetrieveGetActionsResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    headers = client.AttributeDescriptor(name='headers', type_=GetActionsHeaders, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timestarted = client.AttributeDescriptor(name='timestarted', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instrumentDatas = client.AttributeDescriptor(name='instrumentDatas', type_=ActionsInstrumentDatas, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timefinished = client.AttributeDescriptor(name='timefinished', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId, headers, timestarted, instrumentDatas, timefinished]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("RetrieveGetActionsResponse", RetrieveGetActionsResponse)


class retrieveGetActionsResponse(RetrieveGetActionsResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'retrieveGetActionsResponse')
    _tag = 'retrieveGetActionsResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    headers = client.AttributeDescriptor(name='headers', type_=GetActionsHeaders, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timestarted = client.AttributeDescriptor(name='timestarted', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instrumentDatas = client.AttributeDescriptor(name='instrumentDatas', type_=ActionsInstrumentDatas, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timefinished = client.AttributeDescriptor(name='timefinished', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId, headers, timestarted, instrumentDatas, timefinished]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("retrieveGetActionsResponse", retrieveGetActionsResponse)


class RetrieveGetCompanyResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'RetrieveGetCompanyResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    headers = client.AttributeDescriptor(name='headers', type_=GetCompanyHeaders, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fields = client.AttributeDescriptor(name='fields', type_=Fields, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timestarted = client.AttributeDescriptor(name='timestarted', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instrumentDatas = client.AttributeDescriptor(name='instrumentDatas', type_=InstrumentDatas, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timefinished = client.AttributeDescriptor(name='timefinished', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId, headers, fields, timestarted, instrumentDatas, timefinished]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("RetrieveGetCompanyResponse", RetrieveGetCompanyResponse)


class retrieveGetCompanyResponse(RetrieveGetCompanyResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'retrieveGetCompanyResponse')
    _tag = 'retrieveGetCompanyResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    headers = client.AttributeDescriptor(name='headers', type_=GetCompanyHeaders, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fields = client.AttributeDescriptor(name='fields', type_=Fields, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timestarted = client.AttributeDescriptor(name='timestarted', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instrumentDatas = client.AttributeDescriptor(name='instrumentDatas', type_=InstrumentDatas, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timefinished = client.AttributeDescriptor(name='timefinished', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId, headers, fields, timestarted, instrumentDatas, timefinished]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("retrieveGetCompanyResponse", retrieveGetCompanyResponse)


class RetrieveGetDataResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'RetrieveGetDataResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    headers = client.AttributeDescriptor(name='headers', type_=GetDataHeaders, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fields = client.AttributeDescriptor(name='fields', type_=Fields, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timestarted = client.AttributeDescriptor(name='timestarted', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instrumentDatas = client.AttributeDescriptor(name='instrumentDatas', type_=InstrumentDatas, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timefinished = client.AttributeDescriptor(name='timefinished', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId, headers, fields, timestarted, instrumentDatas, timefinished]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("RetrieveGetDataResponse", RetrieveGetDataResponse)


class retrieveGetDataResponse(RetrieveGetDataResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'retrieveGetDataResponse')
    _tag = 'retrieveGetDataResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    headers = client.AttributeDescriptor(name='headers', type_=GetDataHeaders, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fields = client.AttributeDescriptor(name='fields', type_=Fields, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timestarted = client.AttributeDescriptor(name='timestarted', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instrumentDatas = client.AttributeDescriptor(name='instrumentDatas', type_=InstrumentDatas, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timefinished = client.AttributeDescriptor(name='timefinished', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId, headers, fields, timestarted, instrumentDatas, timefinished]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("retrieveGetDataResponse", retrieveGetDataResponse)


class RetrieveGetFundamentalsResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'RetrieveGetFundamentalsResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    headers = client.AttributeDescriptor(name='headers', type_=GetFundamentalsHeaders, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fields = client.AttributeDescriptor(name='fields', type_=Fields, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timestarted = client.AttributeDescriptor(name='timestarted', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instrumentDatas = client.AttributeDescriptor(name='instrumentDatas', type_=FundInstrumentDatas, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timefinished = client.AttributeDescriptor(name='timefinished', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId, headers, fields, timestarted, instrumentDatas, timefinished]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("RetrieveGetFundamentalsResponse", RetrieveGetFundamentalsResponse)


class retrieveGetFundamentalsResponse(RetrieveGetFundamentalsResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'retrieveGetFundamentalsResponse')
    _tag = 'retrieveGetFundamentalsResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    headers = client.AttributeDescriptor(name='headers', type_=GetFundamentalsHeaders, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fields = client.AttributeDescriptor(name='fields', type_=Fields, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timestarted = client.AttributeDescriptor(name='timestarted', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instrumentDatas = client.AttributeDescriptor(name='instrumentDatas', type_=FundInstrumentDatas, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timefinished = client.AttributeDescriptor(name='timefinished', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId, headers, fields, timestarted, instrumentDatas, timefinished]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("retrieveGetFundamentalsResponse", retrieveGetFundamentalsResponse)


class RetrieveGetHistoryResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'RetrieveGetHistoryResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    headers = client.AttributeDescriptor(name='headers', type_=GetHistoryHeaders, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fields = client.AttributeDescriptor(name='fields', type_=Fields, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timestarted = client.AttributeDescriptor(name='timestarted', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instrumentDatas = client.AttributeDescriptor(name='instrumentDatas', type_=HistInstrumentDatas, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timefinished = client.AttributeDescriptor(name='timefinished', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId, headers, fields, timestarted, instrumentDatas, timefinished]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("RetrieveGetHistoryResponse", RetrieveGetHistoryResponse)


class retrieveGetHistoryResponse(RetrieveGetHistoryResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'retrieveGetHistoryResponse')
    _tag = 'retrieveGetHistoryResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    headers = client.AttributeDescriptor(name='headers', type_=GetHistoryHeaders, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fields = client.AttributeDescriptor(name='fields', type_=Fields, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timestarted = client.AttributeDescriptor(name='timestarted', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instrumentDatas = client.AttributeDescriptor(name='instrumentDatas', type_=HistInstrumentDatas, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timefinished = client.AttributeDescriptor(name='timefinished', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId, headers, fields, timestarted, instrumentDatas, timefinished]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("retrieveGetHistoryResponse", retrieveGetHistoryResponse)


class QuotesHeaders(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'QuotesHeaders')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    daterange = client.AttributeDescriptor(name='daterange', type_=DateRange, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    datetimerange = client.AttributeDescriptor(name='datetimerange', type_=DateTimeRange, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    displayqrmdate = client.AttributeDescriptor(name='displayqrmdate', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    login = client.AttributeDescriptor(name='login', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    portsecdes = client.AttributeDescriptor(name='portsecdes', type_=PortSecDes, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    pricing_source = client.AttributeDescriptor(name='pricing_source', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    programflag = client.AttributeDescriptor(name='programflag', type_=ProgramFlag, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    prp = client.AttributeDescriptor(name='prp', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    rundate = client.AttributeDescriptor(name='rundate', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    secid = client.AttributeDescriptor(name='secid', type_=InstrumentType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    sn = client.AttributeDescriptor(name='sn', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    tickexchlength = client.AttributeDescriptor(name='tickexchlength', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    ticklocaltz = client.AttributeDescriptor(name='ticklocaltz', type_=client.BooleanType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    tickoutputtz = client.AttributeDescriptor(name='tickoutputtz', type_=TickOutputTz, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    time = client.AttributeDescriptor(name='time', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    usernumber = client.AttributeDescriptor(name='usernumber', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    version = client.AttributeDescriptor(name='version', type_=Version, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    ws = client.AttributeDescriptor(name='ws', type_=client.IntType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    yellowkey = client.AttributeDescriptor(name='yellowkey', type_=MarketSector, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [daterange, datetimerange, displayqrmdate, login, portsecdes, pricing_source, programflag, prp, rundate, secid, sn, tickexchlength, ticklocaltz, tickoutputtz, time, usernumber, version, ws, yellowkey]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("QuotesHeaders", QuotesHeaders)


class RetrieveGetAllQuotesResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'RetrieveGetAllQuotesResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    headers = client.AttributeDescriptor(name='headers', type_=QuotesHeaders, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timestarted = client.AttributeDescriptor(name='timestarted', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instrumentDatas = client.AttributeDescriptor(name='instrumentDatas', type_=AllQuotesInstrumentDatas, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timefinished = client.AttributeDescriptor(name='timefinished', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId, headers, timestarted, instrumentDatas, timefinished]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("RetrieveGetAllQuotesResponse", RetrieveGetAllQuotesResponse)


class retrieveGetAllQuotesResponse(RetrieveGetAllQuotesResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'retrieveGetAllQuotesResponse')
    _tag = 'retrieveGetAllQuotesResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    headers = client.AttributeDescriptor(name='headers', type_=QuotesHeaders, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timestarted = client.AttributeDescriptor(name='timestarted', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instrumentDatas = client.AttributeDescriptor(name='instrumentDatas', type_=AllQuotesInstrumentDatas, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timefinished = client.AttributeDescriptor(name='timefinished', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId, headers, timestarted, instrumentDatas, timefinished]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("retrieveGetAllQuotesResponse", retrieveGetAllQuotesResponse)


class RetrieveGetQuotesResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'RetrieveGetQuotesResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    headers = client.AttributeDescriptor(name='headers', type_=QuotesHeaders, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timestarted = client.AttributeDescriptor(name='timestarted', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instrumentDatas = client.AttributeDescriptor(name='instrumentDatas', type_=QuotesInstrumentDatas, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timefinished = client.AttributeDescriptor(name='timefinished', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId, headers, timestarted, instrumentDatas, timefinished]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("RetrieveGetQuotesResponse", RetrieveGetQuotesResponse)


class retrieveGetQuotesResponse(RetrieveGetQuotesResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'retrieveGetQuotesResponse')
    _tag = 'retrieveGetQuotesResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    headers = client.AttributeDescriptor(name='headers', type_=QuotesHeaders, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timestarted = client.AttributeDescriptor(name='timestarted', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instrumentDatas = client.AttributeDescriptor(name='instrumentDatas', type_=QuotesInstrumentDatas, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    timefinished = client.AttributeDescriptor(name='timefinished', type_=client.DateTimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId, headers, timestarted, instrumentDatas, timefinished]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("retrieveGetQuotesResponse", retrieveGetQuotesResponse)


class ScheduledHeaders(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'ScheduledHeaders')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    getdataHeaders = client.AttributeDescriptor(name='getdataHeaders', type_=GetDataHeaders, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    gethistoryHeaders = client.AttributeDescriptor(name='gethistoryHeaders', type_=GetHistoryHeaders, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    getfundamentalsHeaders = client.AttributeDescriptor(name='getfundamentalsHeaders', type_=GetFundamentalsHeaders, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    getcompanyHeaders = client.AttributeDescriptor(name='getcompanyHeaders', type_=GetCompanyHeaders, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    getactionsHeaders = client.AttributeDescriptor(name='getactionsHeaders', type_=GetActionsHeaders, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    getquotesHeaders = client.AttributeDescriptor(name='getquotesHeaders', type_=QuotesHeaders, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    getallquotesHeaders = client.AttributeDescriptor(name='getallquotesHeaders', type_=QuotesHeaders, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [getdataHeaders, gethistoryHeaders, getfundamentalsHeaders, getcompanyHeaders, getactionsHeaders, getquotesHeaders, getallquotesHeaders]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("ScheduledHeaders", ScheduledHeaders)


class ScheduledResponse(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'ScheduledResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    headers = client.AttributeDescriptor(name='headers', type_=ScheduledHeaders, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fields = client.AttributeDescriptor(name='fields', type_=Fields, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    bvalfieldsets = client.AttributeDescriptor(name='bvalfieldsets', type_=BvalFieldSets, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fieldsets = client.AttributeDescriptor(name='fieldsets', type_=FieldSets, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instruments = client.AttributeDescriptor(name='instruments', type_=Instruments, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    time = client.AttributeDescriptor(name='time', type_=client.TimeType, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [headers, fields, bvalfieldsets, fieldsets, instruments, responseId, time]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("ScheduledResponse", ScheduledResponse)


class ScheduledResponses(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'ScheduledResponses')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    fileData = client.AttributeDescriptor(name='fileData', type_=ScheduledResponse, min='0', max='unbounded', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [fileData]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("ScheduledResponses", ScheduledResponses)


class RetrieveScheduledResponse(PerSecurityResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'RetrieveScheduledResponse')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fileDatas = client.AttributeDescriptor(name='fileDatas', type_=ScheduledResponses, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId, fileDatas]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("RetrieveScheduledResponse", RetrieveScheduledResponse)


class retrieveScheduledResponse(RetrieveScheduledResponse):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'retrieveScheduledResponse')
    _tag = 'retrieveScheduledResponse'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    statusCode = client.AttributeDescriptor(name='statusCode', type_=ResponseStatus, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    requestId = client.AttributeDescriptor(name='requestId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    responseId = client.AttributeDescriptor(name='responseId', type_=client.StringType, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fileDatas = client.AttributeDescriptor(name='fileDatas', type_=ScheduledResponses, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [statusCode, requestId, responseId, fileDatas]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("retrieveScheduledResponse", retrieveScheduledResponse)


class SubmitGetActionsRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SubmitGetActionsRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    headers = client.AttributeDescriptor(name='headers', type_=GetActionsHeaders, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instruments = client.AttributeDescriptor(name='instruments', type_=Instruments, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [headers, instruments]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("SubmitGetActionsRequest", SubmitGetActionsRequest)


class submitGetActionsRequest(SubmitGetActionsRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'submitGetActionsRequest')
    _tag = 'submitGetActionsRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    headers = client.AttributeDescriptor(name='headers', type_=GetActionsHeaders, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instruments = client.AttributeDescriptor(name='instruments', type_=Instruments, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [headers, instruments]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("submitGetActionsRequest", submitGetActionsRequest)


class SubmitGetAllQuotesRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SubmitGetAllQuotesRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    headers = client.AttributeDescriptor(name='headers', type_=QuotesHeaders, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instruments = client.AttributeDescriptor(name='instruments', type_=Instruments, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [headers, instruments]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("SubmitGetAllQuotesRequest", SubmitGetAllQuotesRequest)


class submitGetAllQuotesRequest(SubmitGetAllQuotesRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'submitGetAllQuotesRequest')
    _tag = 'submitGetAllQuotesRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    headers = client.AttributeDescriptor(name='headers', type_=QuotesHeaders, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instruments = client.AttributeDescriptor(name='instruments', type_=Instruments, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [headers, instruments]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("submitGetAllQuotesRequest", submitGetAllQuotesRequest)


class SubmitGetCompanyRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SubmitGetCompanyRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    headers = client.AttributeDescriptor(name='headers', type_=GetCompanyHeaders, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fieldset = client.AttributeDescriptor(name='fieldset', type_=FieldSet, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fields = client.AttributeDescriptor(name='fields', type_=Fields, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instruments = client.AttributeDescriptor(name='instruments', type_=Instruments, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [headers, fieldset, fields, instruments]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("SubmitGetCompanyRequest", SubmitGetCompanyRequest)


class submitGetCompanyRequest(SubmitGetCompanyRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'submitGetCompanyRequest')
    _tag = 'submitGetCompanyRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    headers = client.AttributeDescriptor(name='headers', type_=GetCompanyHeaders, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fieldset = client.AttributeDescriptor(name='fieldset', type_=FieldSet, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fields = client.AttributeDescriptor(name='fields', type_=Fields, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instruments = client.AttributeDescriptor(name='instruments', type_=Instruments, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [headers, fieldset, fields, instruments]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("submitGetCompanyRequest", submitGetCompanyRequest)


class SubmitGetDataRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SubmitGetDataRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    headers = client.AttributeDescriptor(name='headers', type_=GetDataHeaders, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fieldsets = client.AttributeDescriptor(name='fieldsets', type_=BvalFieldSets, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fields = client.AttributeDescriptor(name='fields', type_=Fields, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instruments = client.AttributeDescriptor(name='instruments', type_=Instruments, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [headers, fieldsets, fields, instruments]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("SubmitGetDataRequest", SubmitGetDataRequest)


class submitGetDataRequest(SubmitGetDataRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'submitGetDataRequest')
    _tag = 'submitGetDataRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    headers = client.AttributeDescriptor(name='headers', type_=GetDataHeaders, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fieldsets = client.AttributeDescriptor(name='fieldsets', type_=BvalFieldSets, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fields = client.AttributeDescriptor(name='fields', type_=Fields, min='0', namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instruments = client.AttributeDescriptor(name='instruments', type_=Instruments, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [headers, fieldsets, fields, instruments]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("submitGetDataRequest", submitGetDataRequest)


class SubmitGetFundamentalsRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SubmitGetFundamentalsRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    headers = client.AttributeDescriptor(name='headers', type_=GetFundamentalsHeaders, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fields = client.AttributeDescriptor(name='fields', type_=Fields, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instruments = client.AttributeDescriptor(name='instruments', type_=FundInstruments, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [headers, fields, instruments]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("SubmitGetFundamentalsRequest", SubmitGetFundamentalsRequest)


class submitGetFundamentalsRequest(SubmitGetFundamentalsRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'submitGetFundamentalsRequest')
    _tag = 'submitGetFundamentalsRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    headers = client.AttributeDescriptor(name='headers', type_=GetFundamentalsHeaders, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fields = client.AttributeDescriptor(name='fields', type_=Fields, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instruments = client.AttributeDescriptor(name='instruments', type_=FundInstruments, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [headers, fields, instruments]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("submitGetFundamentalsRequest", submitGetFundamentalsRequest)


class SubmitGetHistoryRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SubmitGetHistoryRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    headers = client.AttributeDescriptor(name='headers', type_=GetHistoryHeaders, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fields = client.AttributeDescriptor(name='fields', type_=Fields, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instruments = client.AttributeDescriptor(name='instruments', type_=Instruments, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [headers, fields, instruments]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("SubmitGetHistoryRequest", SubmitGetHistoryRequest)


class submitGetHistoryRequest(SubmitGetHistoryRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'submitGetHistoryRequest')
    _tag = 'submitGetHistoryRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    headers = client.AttributeDescriptor(name='headers', type_=GetHistoryHeaders, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    fields = client.AttributeDescriptor(name='fields', type_=Fields, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instruments = client.AttributeDescriptor(name='instruments', type_=Instruments, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [headers, fields, instruments]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("submitGetHistoryRequest", submitGetHistoryRequest)


class SubmitGetQuotesRequest(client.ComplexType):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'SubmitGetQuotesRequest')
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    _abstract = False
    headers = client.AttributeDescriptor(name='headers', type_=QuotesHeaders, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instruments = client.AttributeDescriptor(name='instruments', type_=Instruments, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [headers, instruments]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("SubmitGetQuotesRequest", SubmitGetQuotesRequest)


class submitGetQuotesRequest(SubmitGetQuotesRequest):
    xsd_type = ('http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'submitGetQuotesRequest')
    _tag = 'submitGetQuotesRequest'
    _namespace = 'http://services.bloomberg.com/datalicense/dlws/ps/20071001'
    headers = client.AttributeDescriptor(name='headers', type_=QuotesHeaders, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    instruments = client.AttributeDescriptor(name='instruments', type_=Instruments, namespace='http://services.bloomberg.com/datalicense/dlws/ps/20071001')
    _children = [headers, instruments]
    _schema = static.Schema(
        {'tns': 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', None: 'http://services.bloomberg.com/datalicense/dlws/ps/20071001', 'xsd': 'http://www.w3.org/2001/XMLSchema', 'xs': 'http://www.w3.org/2001/XMLSchema', 'wsdl': 'http://schemas.xmlsoap.org/wsdl/', 'soap': 'http://schemas.xmlsoap.org/wsdl/soap/'},
        'http://services.bloomberg.com/datalicense/dlws/ps/20071001',
        True)
Client.register("submitGetQuotesRequest", submitGetQuotesRequest)

